import varint from "varint";
export const parseRawProof = (proof) => {
    let cursor = 0;
    const proofBuff = typeof proof === 'string' ? Buffer.from(proof, 'hex') : proof;
    const blockHeader = proofBuff.subarray(cursor, 80).toString('hex');
    cursor += 80;
    const txCount = proofBuff.readUInt32LE(cursor);
    cursor += 4;
    console.log('txcount:', txCount);
    const hashCount = varint.decode(proofBuff, cursor);
    cursor += varint.encodingLength(hashCount);
    let hashes = [];
    for (let i = 0; i < hashCount; i++) {
        hashes.push(proofBuff.subarray(cursor, cursor + 32).toString('hex'));
        cursor += 32;
    }
    const bytesOfFlagBits = varint.decode(proofBuff, cursor);
    cursor += varint.encodingLength(bytesOfFlagBits);
    const flags = proofBuff.subarray(cursor, cursor + bytesOfFlagBits).toString('hex');
    console.log('flag bits:', bytesOfFlagBits);
    console.log('flags:', flags);
    console.assert(cursor + bytesOfFlagBits === proofBuff.length, "Proof not read correctly");
    return { blockHeader, txCount, hashes, flags };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhwcm9vZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInR4cHJvb2YudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBUzVCLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQXNCLEVBQWUsRUFBRTtJQUNqRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUE7SUFFZCxNQUFNLFNBQVMsR0FBVyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFlLENBQUE7SUFFakcsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2xFLE1BQU0sSUFBSSxFQUFFLENBQUE7SUFFWixNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzlDLE1BQU0sSUFBSSxDQUFDLENBQUE7SUFFWCxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUVoQyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNsRCxNQUFNLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUUxQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQ3BFLE1BQU0sSUFBSSxFQUFFLENBQUE7S0FDZjtJQUNELE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3hELE1BQU0sSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBRWhELE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDbEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsZUFBZSxDQUFDLENBQUE7SUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFFNUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsZUFBZSxLQUFLLFNBQVMsQ0FBQyxNQUFNLEVBQUUsMEJBQTBCLENBQUMsQ0FBQTtJQUV6RixPQUFPLEVBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUE7QUFDaEQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhcmludCBmcm9tIFwidmFyaW50XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkUHJvb2Yge1xuICAgIGJsb2NrSGVhZGVyOiBzdHJpbmcsXG4gICAgdHhDb3VudDogbnVtYmVyLFxuICAgIGhhc2hlczogc3RyaW5nW10sXG4gICAgZmxhZ3M6IHN0cmluZ1xufVxuXG5leHBvcnQgY29uc3QgcGFyc2VSYXdQcm9vZiA9IChwcm9vZjogQnVmZmVyIHwgc3RyaW5nKTogUGFyc2VkUHJvb2YgPT4ge1xuICAgIGxldCBjdXJzb3IgPSAwXG5cbiAgICBjb25zdCBwcm9vZkJ1ZmY6IEJ1ZmZlciA9IHR5cGVvZiBwcm9vZiA9PT0gJ3N0cmluZycgPyBCdWZmZXIuZnJvbShwcm9vZiwgJ2hleCcpIDogcHJvb2YgYXMgQnVmZmVyXG5cbiAgICBjb25zdCBibG9ja0hlYWRlciA9IHByb29mQnVmZi5zdWJhcnJheShjdXJzb3IsIDgwKS50b1N0cmluZygnaGV4JylcbiAgICBjdXJzb3IgKz0gODBcblxuICAgIGNvbnN0IHR4Q291bnQgPSBwcm9vZkJ1ZmYucmVhZFVJbnQzMkxFKGN1cnNvcilcbiAgICBjdXJzb3IgKz0gNFxuXG4gICAgY29uc29sZS5sb2coJ3R4Y291bnQ6JywgdHhDb3VudClcblxuICAgIGNvbnN0IGhhc2hDb3VudCA9IHZhcmludC5kZWNvZGUocHJvb2ZCdWZmLCBjdXJzb3IpXG4gICAgY3Vyc29yICs9IHZhcmludC5lbmNvZGluZ0xlbmd0aChoYXNoQ291bnQpXG5cbiAgICBsZXQgaGFzaGVzID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhc2hDb3VudDsgaSsrKSB7XG4gICAgICAgIGhhc2hlcy5wdXNoKHByb29mQnVmZi5zdWJhcnJheShjdXJzb3IsIGN1cnNvciArIDMyKS50b1N0cmluZygnaGV4JykpXG4gICAgICAgIGN1cnNvciArPSAzMlxuICAgIH1cbiAgICBjb25zdCBieXRlc09mRmxhZ0JpdHMgPSB2YXJpbnQuZGVjb2RlKHByb29mQnVmZiwgY3Vyc29yKVxuICAgIGN1cnNvciArPSB2YXJpbnQuZW5jb2RpbmdMZW5ndGgoYnl0ZXNPZkZsYWdCaXRzKVxuXG4gICAgY29uc3QgZmxhZ3MgPSBwcm9vZkJ1ZmYuc3ViYXJyYXkoY3Vyc29yLCBjdXJzb3IgKyBieXRlc09mRmxhZ0JpdHMpLnRvU3RyaW5nKCdoZXgnKVxuICAgIGNvbnNvbGUubG9nKCdmbGFnIGJpdHM6JywgYnl0ZXNPZkZsYWdCaXRzKVxuICAgIGNvbnNvbGUubG9nKCdmbGFnczonLCBmbGFncylcblxuICAgIGNvbnNvbGUuYXNzZXJ0KGN1cnNvciArIGJ5dGVzT2ZGbGFnQml0cyA9PT0gcHJvb2ZCdWZmLmxlbmd0aCwgXCJQcm9vZiBub3QgcmVhZCBjb3JyZWN0bHlcIilcblxuICAgIHJldHVybiB7YmxvY2tIZWFkZXIsIHR4Q291bnQsIGhhc2hlcywgZmxhZ3N9XG59XG5cbiJdfQ==