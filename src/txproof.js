import varint from "varint";
export const parseRawProof = (proof) => {
    let cursor = 0;
    const proofBuff = typeof proof === 'string' ? Buffer.from(proof, 'hex') : proof;
    const header = proofBuff.subarray(cursor, 80).toString('hex');
    cursor += 80;
    const txCount = proofBuff.readUInt32LE(cursor);
    cursor += 4;
    const hashCount = varint.decode(proofBuff, cursor);
    cursor += varint.encodingLength(hashCount);
    let hashes = [];
    for (let i = 0; i < hashCount; i++) {
        hashes.push(proofBuff.subarray(cursor, cursor + 32).toString('hex'));
        cursor += 32;
    }
    const flagbitCount = varint.decode(proofBuff, cursor);
    cursor += varint.encodingLength(flagbitCount);
    const flagsLength = Math.ceil(8 / flagbitCount);
    const flags = proofBuff.subarray(cursor, cursor + flagsLength).toString('hex');
    cursor += flagsLength;
    return { header, txCount, hashes, flags };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhwcm9vZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInR4cHJvb2YudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sUUFBUSxDQUFDO0FBUzVCLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQXNCLEVBQWUsRUFBRTtJQUNqRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUE7SUFFZCxNQUFNLFNBQVMsR0FBVyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFlLENBQUE7SUFFakcsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzdELE1BQU0sSUFBSSxFQUFFLENBQUE7SUFFWixNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzlDLE1BQU0sSUFBSSxDQUFDLENBQUE7SUFFWCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQTtJQUNsRCxNQUFNLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUUxQyxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQ3BFLE1BQU0sSUFBSSxFQUFFLENBQUE7S0FDZjtJQUNELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQ3JELE1BQU0sSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRTdDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFBO0lBQy9DLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7SUFFOUUsTUFBTSxJQUFJLFdBQVcsQ0FBQTtJQUVyQixPQUFPLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUE7QUFDM0MsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhcmludCBmcm9tIFwidmFyaW50XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkUHJvb2Yge1xuICAgIGhlYWRlcjogU3RyaW5nLFxuICAgIHR4Q291bnQ6IG51bWJlcixcbiAgICBoYXNoZXM6IFN0cmluZ1tdLFxuICAgIGZsYWdzOiBTdHJpbmdcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnNlUmF3UHJvb2YgPSAocHJvb2Y6IEJ1ZmZlciB8IFN0cmluZyk6IFBhcnNlZFByb29mID0+IHtcbiAgICBsZXQgY3Vyc29yID0gMFxuXG4gICAgY29uc3QgcHJvb2ZCdWZmOiBCdWZmZXIgPSB0eXBlb2YgcHJvb2YgPT09ICdzdHJpbmcnID8gQnVmZmVyLmZyb20ocHJvb2YsICdoZXgnKSA6IHByb29mIGFzIEJ1ZmZlclxuXG4gICAgY29uc3QgaGVhZGVyID0gcHJvb2ZCdWZmLnN1YmFycmF5KGN1cnNvciwgODApLnRvU3RyaW5nKCdoZXgnKVxuICAgIGN1cnNvciArPSA4MFxuXG4gICAgY29uc3QgdHhDb3VudCA9IHByb29mQnVmZi5yZWFkVUludDMyTEUoY3Vyc29yKVxuICAgIGN1cnNvciArPSA0XG5cbiAgICBjb25zdCBoYXNoQ291bnQgPSB2YXJpbnQuZGVjb2RlKHByb29mQnVmZiwgY3Vyc29yKVxuICAgIGN1cnNvciArPSB2YXJpbnQuZW5jb2RpbmdMZW5ndGgoaGFzaENvdW50KVxuXG4gICAgbGV0IGhhc2hlcyA9IFtdXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoYXNoQ291bnQ7IGkrKykge1xuICAgICAgICBoYXNoZXMucHVzaChwcm9vZkJ1ZmYuc3ViYXJyYXkoY3Vyc29yLCBjdXJzb3IgKyAzMikudG9TdHJpbmcoJ2hleCcpKVxuICAgICAgICBjdXJzb3IgKz0gMzJcbiAgICB9XG4gICAgY29uc3QgZmxhZ2JpdENvdW50ID0gdmFyaW50LmRlY29kZShwcm9vZkJ1ZmYsIGN1cnNvcilcbiAgICBjdXJzb3IgKz0gdmFyaW50LmVuY29kaW5nTGVuZ3RoKGZsYWdiaXRDb3VudClcblxuICAgIGNvbnN0IGZsYWdzTGVuZ3RoID0gTWF0aC5jZWlsKDggLyBmbGFnYml0Q291bnQpXG4gICAgY29uc3QgZmxhZ3MgPSBwcm9vZkJ1ZmYuc3ViYXJyYXkoY3Vyc29yLCBjdXJzb3IgKyBmbGFnc0xlbmd0aCkudG9TdHJpbmcoJ2hleCcpXG5cbiAgICBjdXJzb3IgKz0gZmxhZ3NMZW5ndGhcblxuICAgIHJldHVybiB7aGVhZGVyLCB0eENvdW50LCBoYXNoZXMsIGZsYWdzfVxufVxuXG4iXX0=