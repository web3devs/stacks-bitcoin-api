import { BlocksApi, Configuration } from "@stacks/blockchain-api-client";
import { compareToRange, RangeComparison } from "./utils.js";
const { NETWORK } = process.env;
const config = new Configuration({ basePath: `https://stacks-node-api.${NETWORK}.stacks.co` });
const blocksApi = new BlocksApi(config);
export async function getStxBlockHeight(bitcoinBlockHeight) {
    let limit = 30;
    let minOffset = 0, maxOffset = 0, offset = 0;
    // First check recent blocks
    const firstResponse = await blocksApi.getBlockList({ offset, limit });
    let stxBlock = firstResponse.results.find(b => b.burn_block_height === bitcoinBlockHeight);
    // Next check the furthest possible block
    offset += Math.max(limit, firstResponse.results[0].burn_block_height - bitcoinBlockHeight);
    minOffset = limit;
    maxOffset = offset;
    while (!stxBlock) {
        console.log('offsets:', minOffset, offset, maxOffset);
        const blockListResponse = await blocksApi.getBlockList({ offset, limit });
        const blocks = blockListResponse.results;
        // The block list has the most recent block first, so it has the maximum block height
        const range = {
            min: blocks[blocks.length - 1].burn_block_height,
            max: blocks[0].burn_block_height
        };
        console.log('heights:', range.min, bitcoinBlockHeight, range.max);
        switch (compareToRange(bitcoinBlockHeight, range)) {
            case RangeComparison.Contained:
                console.log('contained');
                stxBlock = blocks.find(b => b.burn_block_height === bitcoinBlockHeight);
                return stxBlock?.height;
            case RangeComparison.Above:
                console.log('above');
                maxOffset = Math.max(offset - limit, minOffset);
                break;
            case RangeComparison.Below:
                console.log('below');
                minOffset = Math.min(offset + limit, maxOffset);
                break;
        }
        if (offset < 0 || maxOffset < minOffset) {
            return undefined;
        }
        // Binary search to avoid api throttling
        offset = Math.floor((minOffset + maxOffset) / 2);
    }
    return stxBlock?.height;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmxvY2tBcGlDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJCbG9ja0FwaUNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLGFBQWEsRUFBQyxNQUFNLCtCQUErQixDQUFBO0FBQ3RFLE9BQU8sRUFBQyxjQUFjLEVBQVMsZUFBZSxFQUFDLE1BQU0sWUFBWSxDQUFBO0FBRWpFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRS9CLE1BQU0sTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUMsUUFBUSxFQUFFLDJCQUEyQixPQUFPLFlBQVksRUFBQyxDQUFDLENBQUE7QUFDNUYsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFFdkMsTUFBTSxDQUFDLEtBQUssVUFBVSxpQkFBaUIsQ0FBQyxrQkFBMEI7SUFDOUQsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ2YsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUU3Qyw0QkFBNEI7SUFDNUIsTUFBTSxhQUFhLEdBQUcsTUFBTSxTQUFTLENBQUMsWUFBWSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDdEUsSUFBSSxRQUFRLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEtBQUssa0JBQWtCLENBQUMsQ0FBQztJQUUzRix5Q0FBeUM7SUFDekMsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQTtJQUMxRixTQUFTLEdBQUcsS0FBSyxDQUFBO0lBQ2pCLFNBQVMsR0FBRyxNQUFNLENBQUE7SUFDbEIsT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDckQsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRSxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7UUFFekMscUZBQXFGO1FBQ3JGLE1BQU0sS0FBSyxHQUFVO1lBQ2pCLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7WUFDOUMsR0FBRyxFQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7U0FDcEMsQ0FBQTtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2pFLFFBQVEsY0FBYyxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQy9DLEtBQUssZUFBZSxDQUFDLFNBQVM7Z0JBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7Z0JBQ3hCLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixLQUFLLGtCQUFrQixDQUFDLENBQUE7Z0JBQ3ZFLE9BQU8sUUFBUSxFQUFFLE1BQU0sQ0FBQTtZQUMzQixLQUFLLGVBQWUsQ0FBQyxLQUFLO2dCQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO2dCQUNwQixTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFBO2dCQUMvQyxNQUFLO1lBQ1QsS0FBSyxlQUFlLENBQUMsS0FBSztnQkFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtnQkFDcEIsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQTtnQkFDL0MsTUFBSztTQUNaO1FBQ0QsSUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLFNBQVMsR0FBRyxTQUFTLEVBQUU7WUFDckMsT0FBTyxTQUFTLENBQUE7U0FDbkI7UUFDRCx3Q0FBd0M7UUFDeEMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUE7S0FDcEQ7SUFDRCxPQUFPLFFBQVEsRUFBRSxNQUFNLENBQUM7QUFDNUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmxvY2tzQXBpLCBDb25maWd1cmF0aW9ufSBmcm9tIFwiQHN0YWNrcy9ibG9ja2NoYWluLWFwaS1jbGllbnRcIlxuaW1wb3J0IHtjb21wYXJlVG9SYW5nZSwgUmFuZ2UsIFJhbmdlQ29tcGFyaXNvbn0gZnJvbSBcIi4vdXRpbHMuanNcIlxuXG5jb25zdCB7IE5FVFdPUksgfSA9IHByb2Nlc3MuZW52XG5cbmNvbnN0IGNvbmZpZyA9IG5ldyBDb25maWd1cmF0aW9uKHtiYXNlUGF0aDogYGh0dHBzOi8vc3RhY2tzLW5vZGUtYXBpLiR7TkVUV09SS30uc3RhY2tzLmNvYH0pXG5jb25zdCBibG9ja3NBcGkgPSBuZXcgQmxvY2tzQXBpKGNvbmZpZylcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0eEJsb2NrSGVpZ2h0KGJpdGNvaW5CbG9ja0hlaWdodDogbnVtYmVyKTogUHJvbWlzZTxudW1iZXIgfCB1bmRlZmluZWQ+IHtcbiAgICBsZXQgbGltaXQgPSAzMDtcbiAgICBsZXQgbWluT2Zmc2V0ID0gMCwgbWF4T2Zmc2V0ID0gMCwgb2Zmc2V0ID0gMDtcblxuICAgIC8vIEZpcnN0IGNoZWNrIHJlY2VudCBibG9ja3NcbiAgICBjb25zdCBmaXJzdFJlc3BvbnNlID0gYXdhaXQgYmxvY2tzQXBpLmdldEJsb2NrTGlzdCh7IG9mZnNldCwgbGltaXQgfSk7XG4gICAgbGV0IHN0eEJsb2NrID0gZmlyc3RSZXNwb25zZS5yZXN1bHRzLmZpbmQoYiA9PiBiLmJ1cm5fYmxvY2tfaGVpZ2h0ID09PSBiaXRjb2luQmxvY2tIZWlnaHQpO1xuXG4gICAgLy8gTmV4dCBjaGVjayB0aGUgZnVydGhlc3QgcG9zc2libGUgYmxvY2tcbiAgICBvZmZzZXQgKz0gTWF0aC5tYXgobGltaXQsIGZpcnN0UmVzcG9uc2UucmVzdWx0c1swXS5idXJuX2Jsb2NrX2hlaWdodCAtIGJpdGNvaW5CbG9ja0hlaWdodClcbiAgICBtaW5PZmZzZXQgPSBsaW1pdFxuICAgIG1heE9mZnNldCA9IG9mZnNldFxuICAgIHdoaWxlICghc3R4QmxvY2spIHtcbiAgICAgICAgY29uc29sZS5sb2coJ29mZnNldHM6JywgbWluT2Zmc2V0LCBvZmZzZXQsIG1heE9mZnNldClcbiAgICAgICAgY29uc3QgYmxvY2tMaXN0UmVzcG9uc2UgPSBhd2FpdCBibG9ja3NBcGkuZ2V0QmxvY2tMaXN0KHsgb2Zmc2V0LCBsaW1pdCB9KTtcbiAgICAgICAgY29uc3QgYmxvY2tzID0gYmxvY2tMaXN0UmVzcG9uc2UucmVzdWx0cztcblxuICAgICAgICAvLyBUaGUgYmxvY2sgbGlzdCBoYXMgdGhlIG1vc3QgcmVjZW50IGJsb2NrIGZpcnN0LCBzbyBpdCBoYXMgdGhlIG1heGltdW0gYmxvY2sgaGVpZ2h0XG4gICAgICAgIGNvbnN0IHJhbmdlOiBSYW5nZSA9IHtcbiAgICAgICAgICAgIG1pbjogYmxvY2tzW2Jsb2Nrcy5sZW5ndGgtMV0uYnVybl9ibG9ja19oZWlnaHQsXG4gICAgICAgICAgICBtYXg6ICBibG9ja3NbMF0uYnVybl9ibG9ja19oZWlnaHRcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygnaGVpZ2h0czonLCByYW5nZS5taW4sIGJpdGNvaW5CbG9ja0hlaWdodCwgcmFuZ2UubWF4KVxuICAgICAgICBzd2l0Y2ggKGNvbXBhcmVUb1JhbmdlKGJpdGNvaW5CbG9ja0hlaWdodCwgcmFuZ2UpKSB7XG4gICAgICAgICAgICBjYXNlIFJhbmdlQ29tcGFyaXNvbi5Db250YWluZWQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvbnRhaW5lZCcpXG4gICAgICAgICAgICAgICAgc3R4QmxvY2sgPSBibG9ja3MuZmluZChiID0+IGIuYnVybl9ibG9ja19oZWlnaHQgPT09IGJpdGNvaW5CbG9ja0hlaWdodClcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R4QmxvY2s/LmhlaWdodFxuICAgICAgICAgICAgY2FzZSBSYW5nZUNvbXBhcmlzb24uQWJvdmU6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Fib3ZlJylcbiAgICAgICAgICAgICAgICBtYXhPZmZzZXQgPSBNYXRoLm1heChvZmZzZXQgLSBsaW1pdCwgbWluT2Zmc2V0KVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlIFJhbmdlQ29tcGFyaXNvbi5CZWxvdzpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYmVsb3cnKVxuICAgICAgICAgICAgICAgIG1pbk9mZnNldCA9IE1hdGgubWluKG9mZnNldCArIGxpbWl0LCBtYXhPZmZzZXQpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBtYXhPZmZzZXQgPCBtaW5PZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgICAvLyBCaW5hcnkgc2VhcmNoIHRvIGF2b2lkIGFwaSB0aHJvdHRsaW5nXG4gICAgICAgIG9mZnNldCA9IE1hdGguZmxvb3IoKG1pbk9mZnNldCArIG1heE9mZnNldCApIC8gMilcbiAgICB9XG4gICAgcmV0dXJuIHN0eEJsb2NrPy5oZWlnaHQ7XG59XG5cbiJdfQ==