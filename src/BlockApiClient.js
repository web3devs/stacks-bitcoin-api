import { BlocksApi, Configuration } from "@stacks/blockchain-api-client";
import { compareToRange, RangeComparison } from "./utils.js";
const { NETWORK } = process.env;
const config = new Configuration({ basePath: `https://stacks-node-api.${NETWORK}.stacks.co` });
const blocksApi = new BlocksApi(config);
// TODO This function occasionally misses the block, the binary search algo needs more analysis
export async function getStxBlockHeight(bitcoinBlockHeight) {
    let limit = 30;
    let minOffset = 0, maxOffset = 0, offset = 0;
    // First check recent blocks
    const firstResponse = await blocksApi.getBlockList({ offset, limit });
    let stxBlock = firstResponse.results.find(b => b.burn_block_height === bitcoinBlockHeight);
    // Next check the furthest possible block
    offset += Math.max(limit, firstResponse.results[0].burn_block_height - bitcoinBlockHeight);
    minOffset = limit;
    maxOffset = offset;
    while (!stxBlock) {
        // console.log('offsets:', minOffset, offset, maxOffset)
        const blockListResponse = await blocksApi.getBlockList({ offset, limit });
        const blocks = blockListResponse.results;
        // The block list has the most recent block first, so it has the maximum block height
        const range = {
            min: blocks[blocks.length - 1].burn_block_height,
            max: blocks[0].burn_block_height
        };
        // console.log('heights:', range.min, bitcoinBlockHeight, range.max)
        switch (compareToRange(bitcoinBlockHeight, range)) {
            case RangeComparison.Contained:
                // console.log('contained')
                stxBlock = blocks.find(b => b.burn_block_height === bitcoinBlockHeight);
                return stxBlock?.height;
            case RangeComparison.Above:
                // console.log('above')
                maxOffset = Math.max(offset - limit, minOffset);
                break;
            case RangeComparison.Below:
                // console.log('below')
                minOffset = Math.min(offset + limit, maxOffset);
                break;
        }
        if (offset < 0 || maxOffset < minOffset) {
            return undefined;
        }
        // Binary search to avoid api throttling
        offset = Math.floor((minOffset + maxOffset) / 2);
    }
    return stxBlock?.height;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmxvY2tBcGlDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJCbG9ja0FwaUNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLGFBQWEsRUFBQyxNQUFNLCtCQUErQixDQUFBO0FBQ3RFLE9BQU8sRUFBQyxjQUFjLEVBQVMsZUFBZSxFQUFDLE1BQU0sWUFBWSxDQUFBO0FBRWpFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRS9CLE1BQU0sTUFBTSxHQUFHLElBQUksYUFBYSxDQUFDLEVBQUMsUUFBUSxFQUFFLDJCQUEyQixPQUFPLFlBQVksRUFBQyxDQUFDLENBQUE7QUFDNUYsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFFdkMsK0ZBQStGO0FBQy9GLE1BQU0sQ0FBQyxLQUFLLFVBQVUsaUJBQWlCLENBQUMsa0JBQTBCO0lBQzlELElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNmLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFN0MsNEJBQTRCO0lBQzVCLE1BQU0sYUFBYSxHQUFHLE1BQU0sU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3RFLElBQUksUUFBUSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixLQUFLLGtCQUFrQixDQUFDLENBQUM7SUFFM0YseUNBQXlDO0lBQ3pDLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDLENBQUE7SUFDMUYsU0FBUyxHQUFHLEtBQUssQ0FBQTtJQUNqQixTQUFTLEdBQUcsTUFBTSxDQUFBO0lBQ2xCLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDZCx3REFBd0Q7UUFDeEQsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxRSxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7UUFFekMscUZBQXFGO1FBQ3JGLE1BQU0sS0FBSyxHQUFVO1lBQ2pCLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7WUFDOUMsR0FBRyxFQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUI7U0FDcEMsQ0FBQTtRQUNELG9FQUFvRTtRQUNwRSxRQUFRLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsRUFBRTtZQUMvQyxLQUFLLGVBQWUsQ0FBQyxTQUFTO2dCQUMxQiwyQkFBMkI7Z0JBQzNCLFFBQVEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixLQUFLLGtCQUFrQixDQUFDLENBQUE7Z0JBQ3ZFLE9BQU8sUUFBUSxFQUFFLE1BQU0sQ0FBQTtZQUMzQixLQUFLLGVBQWUsQ0FBQyxLQUFLO2dCQUN0Qix1QkFBdUI7Z0JBQ3ZCLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUE7Z0JBQy9DLE1BQUs7WUFDVCxLQUFLLGVBQWUsQ0FBQyxLQUFLO2dCQUN0Qix1QkFBdUI7Z0JBQ3ZCLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUE7Z0JBQy9DLE1BQUs7U0FDWjtRQUNELElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxTQUFTLEdBQUcsU0FBUyxFQUFFO1lBQ3JDLE9BQU8sU0FBUyxDQUFBO1NBQ25CO1FBQ0Qsd0NBQXdDO1FBQ3hDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0tBQ25EO0lBQ0QsT0FBTyxRQUFRLEVBQUUsTUFBTSxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Jsb2Nrc0FwaSwgQ29uZmlndXJhdGlvbn0gZnJvbSBcIkBzdGFja3MvYmxvY2tjaGFpbi1hcGktY2xpZW50XCJcbmltcG9ydCB7Y29tcGFyZVRvUmFuZ2UsIFJhbmdlLCBSYW5nZUNvbXBhcmlzb259IGZyb20gXCIuL3V0aWxzLmpzXCJcblxuY29uc3QgeyBORVRXT1JLIH0gPSBwcm9jZXNzLmVudlxuXG5jb25zdCBjb25maWcgPSBuZXcgQ29uZmlndXJhdGlvbih7YmFzZVBhdGg6IGBodHRwczovL3N0YWNrcy1ub2RlLWFwaS4ke05FVFdPUkt9LnN0YWNrcy5jb2B9KVxuY29uc3QgYmxvY2tzQXBpID0gbmV3IEJsb2Nrc0FwaShjb25maWcpXG5cbi8vIFRPRE8gVGhpcyBmdW5jdGlvbiBvY2Nhc2lvbmFsbHkgbWlzc2VzIHRoZSBibG9jaywgdGhlIGJpbmFyeSBzZWFyY2ggYWxnbyBuZWVkcyBtb3JlIGFuYWx5c2lzXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3R4QmxvY2tIZWlnaHQoYml0Y29pbkJsb2NrSGVpZ2h0OiBudW1iZXIpOiBQcm9taXNlPG51bWJlciB8IHVuZGVmaW5lZD4ge1xuICAgIGxldCBsaW1pdCA9IDMwO1xuICAgIGxldCBtaW5PZmZzZXQgPSAwLCBtYXhPZmZzZXQgPSAwLCBvZmZzZXQgPSAwO1xuXG4gICAgLy8gRmlyc3QgY2hlY2sgcmVjZW50IGJsb2Nrc1xuICAgIGNvbnN0IGZpcnN0UmVzcG9uc2UgPSBhd2FpdCBibG9ja3NBcGkuZ2V0QmxvY2tMaXN0KHsgb2Zmc2V0LCBsaW1pdCB9KTtcbiAgICBsZXQgc3R4QmxvY2sgPSBmaXJzdFJlc3BvbnNlLnJlc3VsdHMuZmluZChiID0+IGIuYnVybl9ibG9ja19oZWlnaHQgPT09IGJpdGNvaW5CbG9ja0hlaWdodCk7XG5cbiAgICAvLyBOZXh0IGNoZWNrIHRoZSBmdXJ0aGVzdCBwb3NzaWJsZSBibG9ja1xuICAgIG9mZnNldCArPSBNYXRoLm1heChsaW1pdCwgZmlyc3RSZXNwb25zZS5yZXN1bHRzWzBdLmJ1cm5fYmxvY2tfaGVpZ2h0IC0gYml0Y29pbkJsb2NrSGVpZ2h0KVxuICAgIG1pbk9mZnNldCA9IGxpbWl0XG4gICAgbWF4T2Zmc2V0ID0gb2Zmc2V0XG4gICAgd2hpbGUgKCFzdHhCbG9jaykge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnb2Zmc2V0czonLCBtaW5PZmZzZXQsIG9mZnNldCwgbWF4T2Zmc2V0KVxuICAgICAgICBjb25zdCBibG9ja0xpc3RSZXNwb25zZSA9IGF3YWl0IGJsb2Nrc0FwaS5nZXRCbG9ja0xpc3QoeyBvZmZzZXQsIGxpbWl0IH0pO1xuICAgICAgICBjb25zdCBibG9ja3MgPSBibG9ja0xpc3RSZXNwb25zZS5yZXN1bHRzO1xuXG4gICAgICAgIC8vIFRoZSBibG9jayBsaXN0IGhhcyB0aGUgbW9zdCByZWNlbnQgYmxvY2sgZmlyc3QsIHNvIGl0IGhhcyB0aGUgbWF4aW11bSBibG9jayBoZWlnaHRcbiAgICAgICAgY29uc3QgcmFuZ2U6IFJhbmdlID0ge1xuICAgICAgICAgICAgbWluOiBibG9ja3NbYmxvY2tzLmxlbmd0aC0xXS5idXJuX2Jsb2NrX2hlaWdodCxcbiAgICAgICAgICAgIG1heDogIGJsb2Nrc1swXS5idXJuX2Jsb2NrX2hlaWdodFxuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdoZWlnaHRzOicsIHJhbmdlLm1pbiwgYml0Y29pbkJsb2NrSGVpZ2h0LCByYW5nZS5tYXgpXG4gICAgICAgIHN3aXRjaCAoY29tcGFyZVRvUmFuZ2UoYml0Y29pbkJsb2NrSGVpZ2h0LCByYW5nZSkpIHtcbiAgICAgICAgICAgIGNhc2UgUmFuZ2VDb21wYXJpc29uLkNvbnRhaW5lZDpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY29udGFpbmVkJylcbiAgICAgICAgICAgICAgICBzdHhCbG9jayA9IGJsb2Nrcy5maW5kKGIgPT4gYi5idXJuX2Jsb2NrX2hlaWdodCA9PT0gYml0Y29pbkJsb2NrSGVpZ2h0KVxuICAgICAgICAgICAgICAgIHJldHVybiBzdHhCbG9jaz8uaGVpZ2h0XG4gICAgICAgICAgICBjYXNlIFJhbmdlQ29tcGFyaXNvbi5BYm92ZTpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYWJvdmUnKVxuICAgICAgICAgICAgICAgIG1heE9mZnNldCA9IE1hdGgubWF4KG9mZnNldCAtIGxpbWl0LCBtaW5PZmZzZXQpXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgUmFuZ2VDb21wYXJpc29uLkJlbG93OlxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdiZWxvdycpXG4gICAgICAgICAgICAgICAgbWluT2Zmc2V0ID0gTWF0aC5taW4ob2Zmc2V0ICsgbGltaXQsIG1heE9mZnNldClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG1heE9mZnNldCA8IG1pbk9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIC8vIEJpbmFyeSBzZWFyY2ggdG8gYXZvaWQgYXBpIHRocm90dGxpbmdcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5mbG9vcigobWluT2Zmc2V0ICsgbWF4T2Zmc2V0KSAvIDIpXG4gICAgfVxuICAgIHJldHVybiBzdHhCbG9jaz8uaGVpZ2h0O1xufVxuXG4iXX0=