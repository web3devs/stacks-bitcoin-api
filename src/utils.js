import { cvToValue } from "@stacks/transactions";
import { Buffer } from "buffer";
import BN from "bn.js";
import BigNumber from "bignumber.js";
export const hexOrBufferToHex = (hob) => typeof hob === 'string' ? hob : hob.toString('hex');
export const hexOrBufferToBuffer = (hob) => typeof hob === 'string' ? Buffer.from(hob, 'hex') : hob;
export var RangeComparison;
(function (RangeComparison) {
    RangeComparison[RangeComparison["Above"] = 1] = "Above";
    RangeComparison[RangeComparison["Below"] = -1] = "Below";
    RangeComparison[RangeComparison["Contained"] = 0] = "Contained";
})(RangeComparison || (RangeComparison = {}));
export const compareToRange = (i, { min, max }) => i < min ? RangeComparison.Below : i > max ? RangeComparison.Above : RangeComparison.Contained;
export const reverseBuffer = (buffer) => {
    for (let i = 0, j = buffer.length - 1; i < j; ++i, --j) {
        [buffer[i], buffer[j]] = [buffer[j], buffer[i]];
    }
    return buffer;
};
console.assert(reverseBuffer(Buffer.from('00010203', 'hex'))
    .equals(Buffer.from('03020100', 'hex')), 'Reverse buffer failed');
export const cvToBuffer = (cv) => Buffer.from(cvToValue(cv).slice(2), 'hex');
export const numberToBuffer = (value, size = 8) => reverseBuffer(Buffer.from(new BN(value).toString(16, size * 2), 'hex'));
const toSatoshis = (v) => new BN(new BigNumber(v).shiftedBy(8).toString());
const toBitcoins = (v) => new BigNumber(v).shiftedBy(-8).toString();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVcsU0FBUyxFQUFDLE1BQU0sc0JBQXNCLENBQUE7QUFDeEQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLFFBQVEsQ0FBQTtBQUM3QixPQUFPLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDdkIsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBb0IsRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDN0csTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxHQUFvQixFQUFFLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUE7QUFPcEgsTUFBTSxDQUFOLElBQVksZUFJWDtBQUpELFdBQVksZUFBZTtJQUN2Qix1REFBUyxDQUFBO0lBQ1Qsd0RBQVUsQ0FBQTtJQUNWLCtEQUFhLENBQUE7QUFDakIsQ0FBQyxFQUpXLGVBQWUsS0FBZixlQUFlLFFBSTFCO0FBRUQsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBUSxFQUFFLEVBQUUsQ0FDM0QsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQTtBQUVqRyxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFjLEVBQVUsRUFBRTtJQUNwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtRQUNwRCxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNsRDtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2pCLENBQUMsQ0FBQTtBQUVELE9BQU8sQ0FBQyxNQUFNLENBQ1YsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUMzQyx1QkFBdUIsQ0FDMUIsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEVBQVksRUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0FBRzlGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQTJCLEVBQUUsT0FBZSxDQUFDLEVBQVUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUM5RyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsRUFDcEMsS0FBSyxDQUNSLENBQUMsQ0FBQTtBQUNGLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBOEIsRUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDM0csTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFTLEVBQVUsRUFBRSxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCdWZmZXJDViwgY3ZUb1ZhbHVlfSBmcm9tIFwiQHN0YWNrcy90cmFuc2FjdGlvbnNcIlxuaW1wb3J0IHtCdWZmZXJ9IGZyb20gXCJidWZmZXJcIlxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiO1xuaW1wb3J0IEJpZ051bWJlciBmcm9tIFwiYmlnbnVtYmVyLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBoZXhPckJ1ZmZlclRvSGV4ID0gKGhvYjogc3RyaW5nIHwgQnVmZmVyKSA9PiB0eXBlb2YgaG9iID09PSAnc3RyaW5nJyA/IGhvYiA6IGhvYi50b1N0cmluZygnaGV4JylcbmV4cG9ydCBjb25zdCBoZXhPckJ1ZmZlclRvQnVmZmVyID0gKGhvYjogc3RyaW5nIHwgQnVmZmVyKSA9PiB0eXBlb2YgaG9iID09PSAnc3RyaW5nJyA/IEJ1ZmZlci5mcm9tKGhvYiwgJ2hleCcpIDogaG9iXG5cbmV4cG9ydCB0eXBlIFJhbmdlID0ge1xuICAgIG1pbjogbnVtYmVyLFxuICAgIG1heDogbnVtYmVyXG59XG5cbmV4cG9ydCBlbnVtIFJhbmdlQ29tcGFyaXNvbiB7XG4gICAgQWJvdmUgPSAxLFxuICAgIEJlbG93ID0gLTEsXG4gICAgQ29udGFpbmVkID0gMCxcbn1cblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVUb1JhbmdlID0gKGk6IG51bWJlciwge21pbiwgbWF4fTogUmFuZ2UpID0+XG4gICAgaSA8IG1pbiA/IFJhbmdlQ29tcGFyaXNvbi5CZWxvdyA6IGkgPiBtYXggPyBSYW5nZUNvbXBhcmlzb24uQWJvdmUgOiBSYW5nZUNvbXBhcmlzb24uQ29udGFpbmVkXG5cbmV4cG9ydCBjb25zdCByZXZlcnNlQnVmZmVyID0gKGJ1ZmZlcjogQnVmZmVyKTogQnVmZmVyID0+IHtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGJ1ZmZlci5sZW5ndGggLSAxOyBpIDwgajsgKytpLCAtLWopIHtcbiAgICAgICAgW2J1ZmZlcltpXSwgYnVmZmVyW2pdXSA9IFtidWZmZXJbal0sIGJ1ZmZlcltpXV1cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlclxufVxuXG5jb25zb2xlLmFzc2VydChcbiAgICByZXZlcnNlQnVmZmVyKEJ1ZmZlci5mcm9tKCcwMDAxMDIwMycsICdoZXgnKSlcbiAgICAgICAgLmVxdWFscyhCdWZmZXIuZnJvbSgnMDMwMjAxMDAnLCAnaGV4JykpLFxuICAgICdSZXZlcnNlIGJ1ZmZlciBmYWlsZWQnXG4pXG5cbmV4cG9ydCBjb25zdCBjdlRvQnVmZmVyID0gKGN2OiBCdWZmZXJDVik6IEJ1ZmZlciA9PiBCdWZmZXIuZnJvbShjdlRvVmFsdWUoY3YpLnNsaWNlKDIpLCAnaGV4JylcblxuXG5leHBvcnQgY29uc3QgbnVtYmVyVG9CdWZmZXIgPSAodmFsdWU6IEJOIHwgbnVtYmVyIHwgc3RyaW5nLCBzaXplOiBudW1iZXIgPSA4KTogQnVmZmVyID0+IHJldmVyc2VCdWZmZXIoQnVmZmVyLmZyb20oXG4gICAgbmV3IEJOKHZhbHVlKS50b1N0cmluZygxNiwgc2l6ZSAqIDIpLFxuICAgICdoZXgnXG4pKVxuY29uc3QgdG9TYXRvc2hpcyA9ICh2OiBudW1iZXIgfCBzdHJpbmcgfCBCaWdOdW1iZXIpOiBCTiA9PiBuZXcgQk4obmV3IEJpZ051bWJlcih2KS5zaGlmdGVkQnkoOCkudG9TdHJpbmcoKSlcbmNvbnN0IHRvQml0Y29pbnMgPSAodjogbnVtYmVyKTogc3RyaW5nID0+IG5ldyBCaWdOdW1iZXIodikuc2hpZnRlZEJ5KC04KS50b1N0cmluZygpXG4iXX0=