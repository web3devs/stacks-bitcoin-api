import { parseRawProof } from "./txproof.js";
import 'dotenv/config';
const VERBOSE = 2;
const { RPCURL, APIKEY } = process.env;
const callRpc = async (method, params) => {
    const response = await fetch(RPCURL, {
        method: 'POST',
        body: JSON.stringify({
            "jsonrpc": "2.0",
            "id": Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
            "method": method,
            "params": params
        }),
        headers: {
            'Content-Type': 'application/json',
            'x-api-key': APIKEY
        }
    });
    const responseJson = await response.json();
    if (responseJson.error)
        throw responseJson.error;
    return responseJson.result;
};
export const getRawTransaction = (txid, verbose = false) => callRpc('getrawtransaction', [txid, verbose]);
export const getBlockHeader = (blockhash, verbose = false) => callRpc('getblockheader', [blockhash, verbose]);
export const getTxOutProof = async (txids, blockhash) => parseRawProof(await callRpc('gettxoutproof', [txids, blockhash]));
export const getBlock = async (blockhash, verbosity = VERBOSE) => callRpc('getblock', [blockhash, verbosity]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnBjY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnBjY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0MsT0FBTyxlQUFlLENBQUE7QUFFdEIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFBO0FBRWpCLE1BQU0sRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQTtBQUVwQyxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsTUFBYyxFQUFFLE1BQWEsRUFBZ0IsRUFBRTtJQUNsRSxNQUFNLFFBQVEsR0FBRyxNQUFNLEtBQUssQ0FBQyxNQUFnQixFQUFFO1FBQzNDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDakIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUN6RCxRQUFRLEVBQUUsTUFBTTtZQUNoQixRQUFRLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBQ0YsT0FBTyxFQUFFO1lBQ0wsY0FBYyxFQUFFLGtCQUFrQjtZQUNsQyxXQUFXLEVBQUUsTUFBZ0I7U0FDaEM7S0FDSixDQUFDLENBQUE7SUFFRixNQUFNLFlBQVksR0FBUSxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUUvQyxJQUFJLFlBQVksQ0FBQyxLQUFLO1FBQUUsTUFBTSxZQUFZLENBQUMsS0FBSyxDQUFBO0lBRWhELE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQTtBQUM5QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLElBQVksRUFBRSxVQUFtQixLQUFLLEVBQUUsRUFBRSxDQUN4RSxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQTtBQUVqRCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxTQUFpQixFQUFFLFVBQW1CLEtBQUssRUFBRSxFQUFFLENBQzFFLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO0FBRW5ELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLFNBQWlCLEVBQUUsRUFBRSxDQUN0RSxhQUFhLENBQUMsTUFBTSxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUVyRSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsWUFBb0IsT0FBTyxFQUFFLEVBQUUsQ0FDN0UsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VSYXdQcm9vZiB9IGZyb20gXCIuL3R4cHJvb2YuanNcIjtcbmltcG9ydCAnZG90ZW52L2NvbmZpZydcblxuY29uc3QgVkVSQk9TRSA9IDJcblxuY29uc3Qge1JQQ1VSTCwgQVBJS0VZfSA9IHByb2Nlc3MuZW52XG5cbmNvbnN0IGNhbGxScGMgPSBhc3luYyAobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogYW55W10pOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goUlBDVVJMIGFzIHN0cmluZywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgXCJqc29ucnBjXCI6IFwiMi4wXCIsXG4gICAgICAgICAgICBcImlkXCI6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSxcbiAgICAgICAgICAgIFwibWV0aG9kXCI6IG1ldGhvZCxcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IHBhcmFtc1xuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICd4LWFwaS1rZXknOiBBUElLRVkgYXMgc3RyaW5nXG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgcmVzcG9uc2VKc29uOiBhbnkgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuICAgIGlmIChyZXNwb25zZUpzb24uZXJyb3IpIHRocm93IHJlc3BvbnNlSnNvbi5lcnJvclxuXG4gICAgcmV0dXJuIHJlc3BvbnNlSnNvbi5yZXN1bHRcbn1cblxuZXhwb3J0IGNvbnN0IGdldFJhd1RyYW5zYWN0aW9uID0gKHR4aWQ6IHN0cmluZywgdmVyYm9zZTogYm9vbGVhbiA9IGZhbHNlKSA9PlxuICAgIGNhbGxScGMoJ2dldHJhd3RyYW5zYWN0aW9uJywgW3R4aWQsIHZlcmJvc2VdKVxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tIZWFkZXIgPSAoYmxvY2toYXNoOiBzdHJpbmcsIHZlcmJvc2U6IGJvb2xlYW4gPSBmYWxzZSkgPT5cbiAgICBjYWxsUnBjKCdnZXRibG9ja2hlYWRlcicsIFtibG9ja2hhc2gsIHZlcmJvc2VdKVxuXG5leHBvcnQgY29uc3QgZ2V0VHhPdXRQcm9vZiA9IGFzeW5jICh0eGlkczogU3RyaW5nW10sIGJsb2NraGFzaDogc3RyaW5nKSA9PlxuICAgIHBhcnNlUmF3UHJvb2YoYXdhaXQgY2FsbFJwYygnZ2V0dHhvdXRwcm9vZicsIFt0eGlkcywgYmxvY2toYXNoXSkpXG5cbmV4cG9ydCBjb25zdCBnZXRCbG9jayA9IGFzeW5jIChibG9ja2hhc2g6IFN0cmluZywgdmVyYm9zaXR5OiBudW1iZXIgPSBWRVJCT1NFKSA9PlxuICAgIGNhbGxScGMoJ2dldGJsb2NrJywgW2Jsb2NraGFzaCwgdmVyYm9zaXR5XSkiXX0=