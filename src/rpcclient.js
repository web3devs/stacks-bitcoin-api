import fetch from "node-fetch";
import { parseRawProof } from "./txproof.js";
import 'dotenv/config';
const rpcUrl = process.env.RPCURL;
const apiKey = process.env.APIKEY;
const callRpc = async (method, params) => {
    const response = await fetch(rpcUrl, {
        method: 'POST',
        body: JSON.stringify({
            "jsonrpc": "2.0",
            "id": Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
            "method": method,
            "params": params
        }),
        headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
        }
    });
    const responseJson = await response.json();
    if (responseJson.error)
        throw responseJson.error;
    return responseJson.result;
};
export const getRawTransaction = (txid, verbose = false) => callRpc('getrawtransaction', [txid, verbose]);
export const getBlockHeader = (blockhash, verbose = false) => callRpc('getblockheader', [blockhash, verbose]);
export const getTxOutProof = async (txids, blockhash) => parseRawProof(await callRpc('gettxoutproof', [txids, blockhash]));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnBjY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnBjY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLFlBQVksQ0FBQztBQUMvQixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sZUFBZSxDQUFBO0FBRXRCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBZ0IsQ0FBQTtBQUMzQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQWdCLENBQUE7QUFFM0MsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxNQUFhLEVBQWdCLEVBQUU7SUFDbEUsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxFQUFFO1FBQ2pDLE1BQU0sRUFBRSxNQUFNO1FBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDakIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUN6RCxRQUFRLEVBQUUsTUFBTTtZQUNoQixRQUFRLEVBQUUsTUFBTTtTQUNuQixDQUFDO1FBQ0YsT0FBTyxFQUFFO1lBQ0wsY0FBYyxFQUFFLGtCQUFrQjtZQUNsQyxXQUFXLEVBQUUsTUFBTTtTQUN0QjtLQUNKLENBQUMsQ0FBQTtJQUVGLE1BQU0sWUFBWSxHQUFRLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBO0lBRS9DLElBQUksWUFBWSxDQUFDLEtBQUs7UUFBRSxNQUFNLFlBQVksQ0FBQyxLQUFLLENBQUE7SUFFaEQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFBO0FBQzlCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBWSxFQUFFLFVBQW1CLEtBQUssRUFBRSxFQUFFLENBQ3hFLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFBO0FBRWpELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLFNBQWlCLEVBQUUsVUFBbUIsS0FBSyxFQUFFLEVBQUUsQ0FDMUUsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFFbkQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxLQUFlLEVBQUUsU0FBaUIsRUFBRSxFQUFFLENBQ3RFLGFBQWEsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZldGNoIGZyb20gXCJub2RlLWZldGNoXCI7XG5pbXBvcnQgeyBwYXJzZVJhd1Byb29mIH0gZnJvbSBcIi4vdHhwcm9vZi5qc1wiO1xuaW1wb3J0ICdkb3RlbnYvY29uZmlnJ1xuXG5jb25zdCBycGNVcmwgPSBwcm9jZXNzLmVudi5SUENVUkwgYXMgc3RyaW5nXG5jb25zdCBhcGlLZXkgPSBwcm9jZXNzLmVudi5BUElLRVkgYXMgc3RyaW5nXG5cbmNvbnN0IGNhbGxScGMgPSBhc3luYyAobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogYW55W10pOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocnBjVXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBcImpzb25ycGNcIjogXCIyLjBcIixcbiAgICAgICAgICAgIFwiaWRcIjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpLFxuICAgICAgICAgICAgXCJtZXRob2RcIjogbWV0aG9kLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogcGFyYW1zXG4gICAgICAgIH0pLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ3gtYXBpLWtleSc6IGFwaUtleVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IHJlc3BvbnNlSnNvbjogYW55ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBpZiAocmVzcG9uc2VKc29uLmVycm9yKSB0aHJvdyByZXNwb25zZUpzb24uZXJyb3JcblxuICAgIHJldHVybiByZXNwb25zZUpzb24ucmVzdWx0XG59XG5cbmV4cG9ydCBjb25zdCBnZXRSYXdUcmFuc2FjdGlvbiA9ICh0eGlkOiBzdHJpbmcsIHZlcmJvc2U6IGJvb2xlYW4gPSBmYWxzZSkgPT5cbiAgICBjYWxsUnBjKCdnZXRyYXd0cmFuc2FjdGlvbicsIFt0eGlkLCB2ZXJib3NlXSlcblxuZXhwb3J0IGNvbnN0IGdldEJsb2NrSGVhZGVyID0gKGJsb2NraGFzaDogc3RyaW5nLCB2ZXJib3NlOiBib29sZWFuID0gZmFsc2UpID0+XG4gICAgY2FsbFJwYygnZ2V0YmxvY2toZWFkZXInLCBbYmxvY2toYXNoLCB2ZXJib3NlXSlcblxuZXhwb3J0IGNvbnN0IGdldFR4T3V0UHJvb2YgPSBhc3luYyAodHhpZHM6IFN0cmluZ1tdLCBibG9ja2hhc2g6IHN0cmluZykgPT5cbiAgICBwYXJzZVJhd1Byb29mKGF3YWl0IGNhbGxScGMoJ2dldHR4b3V0cHJvb2YnLCBbdHhpZHMsIGJsb2NraGFzaF0pKVxuIl19