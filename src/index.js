import { getBlockHeader, getRawTransaction, getTxOutProof } from "./rpcclient.js";
const config = 'https://btc.getblock.io:443/testnet?api-key=3d54a50e-2442-483d-bddc-2029330b973e';
const txid = "acb58bc6014836adc65fc87b32d11c1deede76e422c46e029b7cc956e80e8f01";
export const getTxProof = async (txid) => {
    const { hex: tx, blockhash } = await getRawTransaction(txid, true);
    const { height, merkleroot } = await getBlockHeader(blockhash, true);
    const proof = await getTxOutProof([txid], blockhash);
    // TODO Solve this mystery
    const reversed = Buffer.from(new Uint8Array(Buffer.from(proof.hashes[1], 'hex')).reverse()).toString('hex');
    console.assert(txid !== reversed, "Why TF is the last hash the txid reversed????");
    return { txid, tx, proof, height, blockhash };
};
getTxProof(txid)
    .then(console.log)
    .catch(console.error);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBR2hGLE1BQU0sTUFBTSxHQUFHLGtGQUFrRixDQUFBO0FBV2pHLE1BQU0sSUFBSSxHQUFHLGtFQUFrRSxDQUFBO0FBRS9FLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxLQUFLLEVBQUUsSUFBWSxFQUFnQixFQUFFO0lBQzNELE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0saUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2xFLE1BQU0sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFDLEdBQUcsTUFBTSxjQUFjLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQ2xFLE1BQU0sS0FBSyxHQUFRLE1BQU0sYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFFekQsMEJBQTBCO0lBQzFCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDM0csT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFLCtDQUErQyxDQUFDLENBQUE7SUFFbEYsT0FBTyxFQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUMsQ0FBQTtBQUMvQyxDQUFDLENBQUE7QUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDO0tBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7S0FDakIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0QmxvY2tIZWFkZXIsIGdldFJhd1RyYW5zYWN0aW9uLCBnZXRUeE91dFByb29mfSBmcm9tIFwiLi9ycGNjbGllbnQuanNcIjtcbmltcG9ydCB7UGFyc2VkUHJvb2Z9IGZyb20gXCIuL3R4cHJvb2YuanNcIjtcblxuY29uc3QgY29uZmlnID0gJ2h0dHBzOi8vYnRjLmdldGJsb2NrLmlvOjQ0My90ZXN0bmV0P2FwaS1rZXk9M2Q1NGE1MGUtMjQ0Mi00ODNkLWJkZGMtMjAyOTMzMGI5NzNlJ1xuXG5pbnRlcmZhY2UgUHJvdmFibGVUeCB7XG4gICAgdHhpZDogc3RyaW5nLFxuICAgIHByb29mOiBQYXJzZWRQcm9vZixcbiAgICB0eDogc3RyaW5nLFxuICAgIGJsb2NraGVpZ2h0OiBzdHJpbmcsXG4gICAgYmxvY2toZWFkZXI6IHN0cmluZyxcbiAgICBibG9ja2hhc2g6IHN0cmluZ1xufVxuXG5jb25zdCB0eGlkID0gXCJhY2I1OGJjNjAxNDgzNmFkYzY1ZmM4N2IzMmQxMWMxZGVlZGU3NmU0MjJjNDZlMDI5YjdjYzk1NmU4MGU4ZjAxXCJcblxuZXhwb3J0IGNvbnN0IGdldFR4UHJvb2YgPSBhc3luYyAodHhpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBjb25zdCB7IGhleDogdHgsIGJsb2NraGFzaCB9ID0gYXdhaXQgZ2V0UmF3VHJhbnNhY3Rpb24odHhpZCwgdHJ1ZSlcbiAgICBjb25zdCB7aGVpZ2h0LCBtZXJrbGVyb290fSA9IGF3YWl0IGdldEJsb2NrSGVhZGVyKGJsb2NraGFzaCwgdHJ1ZSlcbiAgICBjb25zdCBwcm9vZjogYW55ID0gYXdhaXQgZ2V0VHhPdXRQcm9vZihbdHhpZF0sIGJsb2NraGFzaClcblxuICAgIC8vIFRPRE8gU29sdmUgdGhpcyBteXN0ZXJ5XG4gICAgY29uc3QgcmV2ZXJzZWQgPSBCdWZmZXIuZnJvbShuZXcgVWludDhBcnJheShCdWZmZXIuZnJvbShwcm9vZi5oYXNoZXNbMV0sICdoZXgnKSkucmV2ZXJzZSgpKS50b1N0cmluZygnaGV4JylcbiAgICBjb25zb2xlLmFzc2VydCh0eGlkICE9PSByZXZlcnNlZCwgXCJXaHkgVEYgaXMgdGhlIGxhc3QgaGFzaCB0aGUgdHhpZCByZXZlcnNlZD8/Pz9cIilcblxuICAgIHJldHVybiB7dHhpZCwgdHgsIHByb29mLCBoZWlnaHQsIGJsb2NraGFzaH1cbn1cblxuZ2V0VHhQcm9vZih0eGlkKVxuICAgIC50aGVuKGNvbnNvbGUubG9nKVxuICAgIC5jYXRjaChjb25zb2xlLmVycm9yKSJdfQ==