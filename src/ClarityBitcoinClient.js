import { callReadOnlyFunction } from "@stacks/transactions";
import { cvToBuffer } from "./utils.js";
const { CLARITY_BITCOIN_CONTRACT_NAME, CACHE_TX_CONTRACT_NAME, CLARITY_BITCOIN_CONTRACT_ADDRESS, NETWORK, SENDER_ADDRESS, } = process.env;
export const concatTx = async (tx) => {
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'concat-tx',
        functionArgs: [tx],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToBuffer(result);
};
export const verifyCompactTx = (header, tx, proof) => callReadOnlyFunction({
    contractName: CLARITY_BITCOIN_CONTRACT_NAME,
    contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
    functionName: 'was-tx-mined-compact',
    functionArgs: [header, tx, proof],
    network: NETWORK,
    senderAddress: SENDER_ADDRESS,
});
export const verifyTx = (header, tx, proof) => callReadOnlyFunction({
    contractName: CLARITY_BITCOIN_CONTRACT_NAME,
    contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
    functionName: 'was-tx-mined',
    functionArgs: [header, tx, proof],
    network: NETWORK,
    senderAddress: SENDER_ADDRESS,
});
export const concatHeader = (header) => callReadOnlyFunction({
    contractName: CLARITY_BITCOIN_CONTRACT_NAME,
    contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
    functionName: 'concat-header',
    functionArgs: [header],
    network: NETWORK,
    senderAddress: SENDER_ADDRESS,
});
export const parseTx = (tx) => callReadOnlyFunction({
    contractName: CLARITY_BITCOIN_CONTRACT_NAME,
    contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
    functionName: 'parse-tx',
    functionArgs: [tx],
    network: NETWORK,
    senderAddress: SENDER_ADDRESS,
});
//# sourceMappingURL=data:application/json;base64,