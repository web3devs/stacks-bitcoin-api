import { bufferCV, callReadOnlyFunction, cvToValue, uintCV } from "@stacks/transactions";
const { CLARITY_BITCOIN_CONTRACT_NAME, CLARITY_BITCOIN_CONTRACT_ADDRESS, NETWORK, SENDER_ADDRESS } = process.env;
export const verifyBlockHeader = async (blockHeader, stxBlockHeight) => {
    // (verify-block-header (headerbuff (buff 80)) (expected-block-height uint))
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'verify-block-header',
        functionArgs: [
            bufferCV(blockHeader),
            uintCV(stxBlockHeight)
        ],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToValue(result);
};
const cvToBuffer = (cv) => Buffer.from(cvToValue(cv).slice(2), 'hex');
export const getReversedTxId = async (tx) => {
    // (define-read-only (get-reversed-txid (tx (buff 1024)))
    const functionName = 'get-reversed-txid';
    const functionArgs = [
        bufferCV(tx)
    ];
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName,
        functionArgs,
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToBuffer(result);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhcml0eUJpdGNvaW5DbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDbGFyaXR5Qml0Y29pbkNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVcsUUFBUSxFQUFFLG9CQUFvQixFQUFnQixTQUFTLEVBQUUsTUFBTSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFL0csTUFBTSxFQUNGLDZCQUE2QixFQUM3QixnQ0FBZ0MsRUFDaEMsT0FBTyxFQUNQLGNBQWMsRUFDakIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRWYsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxFQUFFLFdBQW1CLEVBQUUsY0FBc0IsRUFBb0IsRUFBRTtJQUNyRyw0RUFBNEU7SUFDNUUsTUFBTSxNQUFNLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztRQUN0QyxZQUFZLEVBQUUsNkJBQXVDO1FBQ3JELGVBQWUsRUFBRSxnQ0FBMEM7UUFDM0QsWUFBWSxFQUFFLHFCQUFxQjtRQUNuQyxZQUFZLEVBQUU7WUFDVixRQUFRLENBQUMsV0FBVyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxjQUFjLENBQUM7U0FDekI7UUFDRCxPQUFPLEVBQUUsT0FBYztRQUN2QixhQUFhLEVBQUUsY0FBd0I7S0FDMUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDNUIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFZLEVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUN2RixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUFFLEVBQVUsRUFBbUIsRUFBRTtJQUNqRSx5REFBeUQ7SUFDekQsTUFBTSxZQUFZLEdBQUcsbUJBQW1CLENBQUE7SUFDeEMsTUFBTSxZQUFZLEdBQW1CO1FBQ2pDLFFBQVEsQ0FBQyxFQUFFLENBQUM7S0FDZixDQUFBO0lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztRQUN0QyxZQUFZLEVBQUUsNkJBQXVDO1FBQ3JELGVBQWUsRUFBRSxnQ0FBMEM7UUFDM0QsWUFBWTtRQUNaLFlBQVk7UUFDWixPQUFPLEVBQUUsT0FBYztRQUN2QixhQUFhLEVBQUUsY0FBd0I7S0FDMUMsQ0FBYSxDQUFBO0lBQ2QsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDN0IsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCdWZmZXJDViwgYnVmZmVyQ1YsIGNhbGxSZWFkT25seUZ1bmN0aW9uLCBDbGFyaXR5VmFsdWUsIGN2VG9WYWx1ZSwgdWludENWfSBmcm9tIFwiQHN0YWNrcy90cmFuc2FjdGlvbnNcIjtcblxuY29uc3Qge1xuICAgIENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9OQU1FLFxuICAgIENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTLFxuICAgIE5FVFdPUkssXG4gICAgU0VOREVSX0FERFJFU1Ncbn0gPSBwcm9jZXNzLmVudlxuXG5leHBvcnQgY29uc3QgdmVyaWZ5QmxvY2tIZWFkZXIgPSBhc3luYyAoYmxvY2tIZWFkZXI6IEJ1ZmZlciwgc3R4QmxvY2tIZWlnaHQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIC8vICh2ZXJpZnktYmxvY2staGVhZGVyIChoZWFkZXJidWZmIChidWZmIDgwKSkgKGV4cGVjdGVkLWJsb2NrLWhlaWdodCB1aW50KSlcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsUmVhZE9ubHlGdW5jdGlvbih7XG4gICAgICAgIGNvbnRyYWN0TmFtZTogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX05BTUUgYXMgc3RyaW5nLFxuICAgICAgICBjb250cmFjdEFkZHJlc3M6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTIGFzIHN0cmluZyxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiAndmVyaWZ5LWJsb2NrLWhlYWRlcicsXG4gICAgICAgIGZ1bmN0aW9uQXJnczogW1xuICAgICAgICAgICAgYnVmZmVyQ1YoYmxvY2tIZWFkZXIpLFxuICAgICAgICAgICAgdWludENWKHN0eEJsb2NrSGVpZ2h0KVxuICAgICAgICBdLFxuICAgICAgICBuZXR3b3JrOiBORVRXT1JLIGFzIGFueSxcbiAgICAgICAgc2VuZGVyQWRkcmVzczogU0VOREVSX0FERFJFU1MgYXMgc3RyaW5nLFxuICAgIH0pXG4gICAgcmV0dXJuIGN2VG9WYWx1ZShyZXN1bHQpXG59XG5cbmNvbnN0IGN2VG9CdWZmZXIgPSAoY3Y6IEJ1ZmZlckNWKTogQnVmZmVyID0+IEJ1ZmZlci5mcm9tKGN2VG9WYWx1ZShjdikuc2xpY2UoMiksICdoZXgnKVxuZXhwb3J0IGNvbnN0IGdldFJldmVyc2VkVHhJZCA9IGFzeW5jICh0eDogQnVmZmVyKTogUHJvbWlzZTxCdWZmZXI+ID0+IHtcbiAgICAvLyAoZGVmaW5lLXJlYWQtb25seSAoZ2V0LXJldmVyc2VkLXR4aWQgKHR4IChidWZmIDEwMjQpKSlcbiAgICBjb25zdCBmdW5jdGlvbk5hbWUgPSAnZ2V0LXJldmVyc2VkLXR4aWQnXG4gICAgY29uc3QgZnVuY3Rpb25BcmdzOiBDbGFyaXR5VmFsdWVbXSA9IFtcbiAgICAgICAgYnVmZmVyQ1YodHgpXG4gICAgXVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbFJlYWRPbmx5RnVuY3Rpb24oe1xuICAgICAgICBjb250cmFjdE5hbWU6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9OQU1FIGFzIHN0cmluZyxcbiAgICAgICAgY29udHJhY3RBZGRyZXNzOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgICAgIGZ1bmN0aW9uTmFtZSxcbiAgICAgICAgZnVuY3Rpb25BcmdzLFxuICAgICAgICBuZXR3b3JrOiBORVRXT1JLIGFzIGFueSxcbiAgICAgICAgc2VuZGVyQWRkcmVzczogU0VOREVSX0FERFJFU1MgYXMgc3RyaW5nLFxuICAgIH0pIGFzIEJ1ZmZlckNWXG4gICAgcmV0dXJuIGN2VG9CdWZmZXIocmVzdWx0KVxufVxuIl19