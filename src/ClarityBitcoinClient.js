import { bufferCV, callReadOnlyFunction, cvToValue, listCV, tupleCV, uintCV } from "@stacks/transactions";
const { CLARITY_BITCOIN_CONTRACT_NAME, CLARITY_BITCOIN_CONTRACT_ADDRESS, NETWORK, SENDER_ADDRESS } = process.env;
const reverseBuffer = (buffer) => {
    for (let i = 0, j = buffer.length - 1; i < j; ++i, --j) {
        [buffer[i], buffer[j]] = [buffer[j], buffer[i]];
    }
    return buffer;
};
console.assert(reverseBuffer(Buffer.from('00010203', 'hex'))
    .equals(Buffer.from('03020100', 'hex')), 'Reverse buffer failed');
const cvToBuffer = (cv) => Buffer.from(cvToValue(cv).slice(2), 'hex');
export const verifyBlockHeader = async (blockHeader, stxBlockHeight) => {
    // (verify-block-header (headerbuff (buff 80)) (expected-block-height uint))
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'verify-block-header',
        functionArgs: [
            bufferCV(blockHeader),
            uintCV(stxBlockHeight)
        ],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToValue(result);
};
export const getReversedTxId = async (tx) => {
    // (define-read-only (get-reversed-txid (tx (buff 1024)))
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'get-reversed-txid',
        functionArgs: [bufferCV(tx)],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToBuffer(result);
};
export const verifyProofOnStacks = async (stxBlockHeight, blockHeader, tx, txIndex, proof) => {
    console.assert(blockHeader.length === 80, "header length incorrect");
    console.assert(tx.length <= 1024, "tx too long");
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'was-tx-mined-compact',
        functionArgs: [
            tupleCV({
                header: bufferCV(blockHeader),
                height: uintCV(stxBlockHeight),
            }),
            bufferCV(tx),
            tupleCV({
                "tx-index": uintCV(txIndex),
                hashes: listCV(proof.map(hash => bufferCV(reverseBuffer(hash)))),
                "tree-depth": uintCV(proof.length)
            })
        ],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToValue(result).value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhcml0eUJpdGNvaW5DbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDbGFyaXR5Qml0Y29pbkNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUgsUUFBUSxFQUNSLG9CQUFvQixFQUVwQixTQUFTLEVBQ1QsTUFBTSxFQUNOLE9BQU8sRUFDUCxNQUFNLEVBQ1QsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixNQUFNLEVBQ0YsNkJBQTZCLEVBQzdCLGdDQUFnQyxFQUNoQyxPQUFPLEVBQ1AsY0FBYyxFQUNqQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUE7QUFFZixNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQWMsRUFBVSxFQUFFO0lBQzdDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQ3BELENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2xEO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDakIsQ0FBQyxDQUFBO0FBRUQsT0FBTyxDQUFDLE1BQU0sQ0FDVixhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQzNDLHVCQUF1QixDQUMxQixDQUFBO0FBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFZLEVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUV2RixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQUUsV0FBbUIsRUFBRSxjQUFzQixFQUFvQixFQUFFO0lBQ3JHLDRFQUE0RTtJQUM1RSxNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFvQixDQUFDO1FBQ3RDLFlBQVksRUFBRSw2QkFBdUM7UUFDckQsZUFBZSxFQUFFLGdDQUEwQztRQUMzRCxZQUFZLEVBQUUscUJBQXFCO1FBQ25DLFlBQVksRUFBRTtZQUNWLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFDckIsTUFBTSxDQUFDLGNBQWMsQ0FBQztTQUN6QjtRQUNELE9BQU8sRUFBRSxPQUFjO1FBQ3ZCLGFBQWEsRUFBRSxjQUF3QjtLQUMxQyxDQUFDLENBQUE7SUFDRixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM1QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUFFLEVBQVUsRUFBbUIsRUFBRTtJQUNqRSx5REFBeUQ7SUFDekQsTUFBTSxNQUFNLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztRQUN0QyxZQUFZLEVBQUUsNkJBQXVDO1FBQ3JELGVBQWUsRUFBRSxnQ0FBMEM7UUFDM0QsWUFBWSxFQUFFLG1CQUFtQjtRQUNqQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsT0FBTyxFQUFFLE9BQWM7UUFDdkIsYUFBYSxFQUFFLGNBQXdCO0tBQzFDLENBQWEsQ0FBQTtJQUNkLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQzdCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEtBQUssRUFBRSxjQUFzQixFQUFFLFdBQW1CLEVBQUUsRUFBVSxFQUFFLE9BQWUsRUFBRSxLQUFlLEVBQW9CLEVBQUU7SUFDckosT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLEVBQUUsRUFBRSx5QkFBeUIsQ0FBQyxDQUFBO0lBQ3BFLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUE7SUFFaEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztRQUN0QyxZQUFZLEVBQUUsNkJBQXVDO1FBQ3JELGVBQWUsRUFBRSxnQ0FBMEM7UUFDM0QsWUFBWSxFQUFFLHNCQUFzQjtRQUNwQyxZQUFZLEVBQUU7WUFDVixPQUFPLENBQUM7Z0JBQ0osTUFBTSxFQUFFLFFBQVEsQ0FBQyxXQUFXLENBQUM7Z0JBQzdCLE1BQU0sRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDO2FBQ2pDLENBQUM7WUFDRixRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ1osT0FBTyxDQUFDO2dCQUNKLFVBQVUsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDO2dCQUMzQixNQUFNLEVBQUUsTUFBTSxDQUFXLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO2FBQ3JDLENBQUM7U0FDTDtRQUNELE9BQU8sRUFBRSxPQUFjO1FBQ3ZCLGFBQWEsRUFBRSxjQUF3QjtLQUMxQyxDQUFDLENBQUE7SUFDRixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDbEMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBCdWZmZXJDVixcbiAgICBidWZmZXJDVixcbiAgICBjYWxsUmVhZE9ubHlGdW5jdGlvbixcbiAgICBDbGFyaXR5VmFsdWUsXG4gICAgY3ZUb1ZhbHVlLFxuICAgIGxpc3RDVixcbiAgICB0dXBsZUNWLFxuICAgIHVpbnRDVlxufSBmcm9tIFwiQHN0YWNrcy90cmFuc2FjdGlvbnNcIjtcblxuY29uc3Qge1xuICAgIENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9OQU1FLFxuICAgIENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTLFxuICAgIE5FVFdPUkssXG4gICAgU0VOREVSX0FERFJFU1Ncbn0gPSBwcm9jZXNzLmVudlxuXG5jb25zdCByZXZlcnNlQnVmZmVyID0gKGJ1ZmZlcjogQnVmZmVyKTogQnVmZmVyID0+IHtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IGJ1ZmZlci5sZW5ndGggLSAxOyBpIDwgajsgKytpLCAtLWopIHtcbiAgICAgICAgW2J1ZmZlcltpXSwgYnVmZmVyW2pdXSA9IFtidWZmZXJbal0sIGJ1ZmZlcltpXV1cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlclxufVxuXG5jb25zb2xlLmFzc2VydChcbiAgICByZXZlcnNlQnVmZmVyKEJ1ZmZlci5mcm9tKCcwMDAxMDIwMycsICdoZXgnKSlcbiAgICAgICAgLmVxdWFscyhCdWZmZXIuZnJvbSgnMDMwMjAxMDAnLCAnaGV4JykpLFxuICAgICdSZXZlcnNlIGJ1ZmZlciBmYWlsZWQnXG4pXG5cbmNvbnN0IGN2VG9CdWZmZXIgPSAoY3Y6IEJ1ZmZlckNWKTogQnVmZmVyID0+IEJ1ZmZlci5mcm9tKGN2VG9WYWx1ZShjdikuc2xpY2UoMiksICdoZXgnKVxuXG5leHBvcnQgY29uc3QgdmVyaWZ5QmxvY2tIZWFkZXIgPSBhc3luYyAoYmxvY2tIZWFkZXI6IEJ1ZmZlciwgc3R4QmxvY2tIZWlnaHQ6IG51bWJlcik6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIC8vICh2ZXJpZnktYmxvY2staGVhZGVyIChoZWFkZXJidWZmIChidWZmIDgwKSkgKGV4cGVjdGVkLWJsb2NrLWhlaWdodCB1aW50KSlcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsUmVhZE9ubHlGdW5jdGlvbih7XG4gICAgICAgIGNvbnRyYWN0TmFtZTogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX05BTUUgYXMgc3RyaW5nLFxuICAgICAgICBjb250cmFjdEFkZHJlc3M6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTIGFzIHN0cmluZyxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiAndmVyaWZ5LWJsb2NrLWhlYWRlcicsXG4gICAgICAgIGZ1bmN0aW9uQXJnczogW1xuICAgICAgICAgICAgYnVmZmVyQ1YoYmxvY2tIZWFkZXIpLFxuICAgICAgICAgICAgdWludENWKHN0eEJsb2NrSGVpZ2h0KVxuICAgICAgICBdLFxuICAgICAgICBuZXR3b3JrOiBORVRXT1JLIGFzIGFueSxcbiAgICAgICAgc2VuZGVyQWRkcmVzczogU0VOREVSX0FERFJFU1MgYXMgc3RyaW5nLFxuICAgIH0pXG4gICAgcmV0dXJuIGN2VG9WYWx1ZShyZXN1bHQpXG59XG5cbmV4cG9ydCBjb25zdCBnZXRSZXZlcnNlZFR4SWQgPSBhc3luYyAodHg6IEJ1ZmZlcik6IFByb21pc2U8QnVmZmVyPiA9PiB7XG4gICAgLy8gKGRlZmluZS1yZWFkLW9ubHkgKGdldC1yZXZlcnNlZC10eGlkICh0eCAoYnVmZiAxMDI0KSkpXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbFJlYWRPbmx5RnVuY3Rpb24oe1xuICAgICAgICBjb250cmFjdE5hbWU6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9OQU1FIGFzIHN0cmluZyxcbiAgICAgICAgY29udHJhY3RBZGRyZXNzOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgICAgIGZ1bmN0aW9uTmFtZTogJ2dldC1yZXZlcnNlZC10eGlkJyxcbiAgICAgICAgZnVuY3Rpb25BcmdzOiBbYnVmZmVyQ1YodHgpXSxcbiAgICAgICAgbmV0d29yazogTkVUV09SSyBhcyBhbnksXG4gICAgICAgIHNlbmRlckFkZHJlc3M6IFNFTkRFUl9BRERSRVNTIGFzIHN0cmluZyxcbiAgICB9KSBhcyBCdWZmZXJDVlxuICAgIHJldHVybiBjdlRvQnVmZmVyKHJlc3VsdClcbn1cblxuZXhwb3J0IGNvbnN0IHZlcmlmeVByb29mT25TdGFja3MgPSBhc3luYyAoc3R4QmxvY2tIZWlnaHQ6IG51bWJlciwgYmxvY2tIZWFkZXI6IEJ1ZmZlciwgdHg6IEJ1ZmZlciwgdHhJbmRleDogbnVtYmVyLCBwcm9vZjogQnVmZmVyW10pOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICBjb25zb2xlLmFzc2VydChibG9ja0hlYWRlci5sZW5ndGggPT09IDgwLCBcImhlYWRlciBsZW5ndGggaW5jb3JyZWN0XCIpXG4gICAgY29uc29sZS5hc3NlcnQodHgubGVuZ3RoIDw9IDEwMjQsIFwidHggdG9vIGxvbmdcIilcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxSZWFkT25seUZ1bmN0aW9uKHtcbiAgICAgICAgY29udHJhY3ROYW1lOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfTkFNRSBhcyBzdHJpbmcsXG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX0FERFJFU1MgYXMgc3RyaW5nLFxuICAgICAgICBmdW5jdGlvbk5hbWU6ICd3YXMtdHgtbWluZWQtY29tcGFjdCcsXG4gICAgICAgIGZ1bmN0aW9uQXJnczogW1xuICAgICAgICAgICAgdHVwbGVDVih7XG4gICAgICAgICAgICAgICAgaGVhZGVyOiBidWZmZXJDVihibG9ja0hlYWRlciksXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB1aW50Q1Yoc3R4QmxvY2tIZWlnaHQpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBidWZmZXJDVih0eCksXG4gICAgICAgICAgICB0dXBsZUNWKHtcbiAgICAgICAgICAgICAgICBcInR4LWluZGV4XCI6IHVpbnRDVih0eEluZGV4KSxcbiAgICAgICAgICAgICAgICBoYXNoZXM6IGxpc3RDVjxCdWZmZXJDVj4ocHJvb2YubWFwKGhhc2ggPT4gYnVmZmVyQ1YocmV2ZXJzZUJ1ZmZlcihoYXNoKSkpKSxcbiAgICAgICAgICAgICAgICBcInRyZWUtZGVwdGhcIjogdWludENWKHByb29mLmxlbmd0aClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0sXG4gICAgICAgIG5ldHdvcms6IE5FVFdPUksgYXMgYW55LFxuICAgICAgICBzZW5kZXJBZGRyZXNzOiBTRU5ERVJfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgfSlcbiAgICByZXR1cm4gY3ZUb1ZhbHVlKHJlc3VsdCkudmFsdWVcbn1cbiJdfQ==