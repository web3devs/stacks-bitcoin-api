import { callReadOnlyFunction, cvToJSON, cvToValue } from "@stacks/transactions";
import { cvToBuffer } from "./utils.js";
const { CLARITY_BITCOIN_CONTRACT_NAME, CACHE_TX_CONTRACT_NAME, CLARITY_BITCOIN_CONTRACT_ADDRESS, NETWORK, SENDER_ADDRESS, } = process.env;
export const concatTx = async (tx) => {
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'concat-tx',
        functionArgs: [tx],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToBuffer(result);
};
export const verifyCompactTx = async (header, tx, proof) => {
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'was-tx-mined-compact',
        functionArgs: [header, tx, proof],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToValue(result);
};
export const verifyTx = async (header, tx, proof) => {
    const transaction = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'was-tx-mined',
        functionArgs: [header, tx, proof],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return transaction;
};
export const parseTx = async (tx) => {
    const result = await callReadOnlyFunction({
        contractName: CLARITY_BITCOIN_CONTRACT_NAME,
        contractAddress: CLARITY_BITCOIN_CONTRACT_ADDRESS,
        functionName: 'parse-tx',
        functionArgs: [tx],
        network: NETWORK,
        senderAddress: SENDER_ADDRESS,
    });
    return cvToJSON(result);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhcml0eUJpdGNvaW5DbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJDbGFyaXR5Qml0Y29pbkNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBSUgsb0JBQW9CLEVBQ3BCLFFBQVEsRUFDUixTQUFTLEVBU1osTUFBTSxzQkFBc0IsQ0FBQztBQUc5QixPQUFPLEVBQUMsVUFBVSxFQUFnQixNQUFNLFlBQVksQ0FBQztBQUdyRCxNQUFNLEVBQ0YsNkJBQTZCLEVBQzdCLHNCQUFzQixFQUN0QixnQ0FBZ0MsRUFDaEMsT0FBTyxFQUNQLGNBQWMsR0FDakIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBaUxmLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsRUFBcUIsRUFBbUIsRUFBRTtJQUNyRSxNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFvQixDQUFDO1FBQ3RDLFlBQVksRUFBRSw2QkFBdUM7UUFDckQsZUFBZSxFQUFFLGdDQUEwQztRQUMzRCxZQUFZLEVBQUUsV0FBVztRQUN6QixZQUFZLEVBQUUsQ0FBRSxFQUFFLENBQUU7UUFDcEIsT0FBTyxFQUFFLE9BQWM7UUFDdkIsYUFBYSxFQUFFLGNBQXdCO0tBQzFDLENBQUMsQ0FBQTtJQUNGLE9BQU8sVUFBVSxDQUFDLE1BQWtCLENBQUMsQ0FBQTtBQUN6QyxDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUNoQyxNQUFlLEVBQ2YsRUFBWSxFQUNaLEtBQWMsRUFDRixFQUFFO0lBQ2QsTUFBTSxNQUFNLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQztRQUN0QyxZQUFZLEVBQUUsNkJBQXVDO1FBQ3JELGVBQWUsRUFBRSxnQ0FBMEM7UUFDM0QsWUFBWSxFQUFFLHNCQUFzQjtRQUNwQyxZQUFZLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQztRQUNqQyxPQUFPLEVBQUUsT0FBYztRQUN2QixhQUFhLEVBQUUsY0FBd0I7S0FDMUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDNUIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFDekIsTUFBZSxFQUNmLEVBQVksRUFDWixLQUFjLEVBQ0YsRUFBRTtJQUNkLE1BQU0sV0FBVyxHQUFHLE1BQU0sb0JBQW9CLENBQUM7UUFDM0MsWUFBWSxFQUFFLDZCQUF1QztRQUNyRCxlQUFlLEVBQUUsZ0NBQTBDO1FBQzNELFlBQVksRUFBRSxjQUFjO1FBQzVCLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxPQUFjO1FBQ3ZCLGFBQWEsRUFBRSxjQUF3QjtLQUMxQyxDQUFDLENBQUM7SUFDSCxPQUFPLFdBQVcsQ0FBQTtBQUN0QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEVBQVksRUFBZ0IsRUFBRTtJQUN4RCxNQUFNLE1BQU0sR0FBRyxNQUFNLG9CQUFvQixDQUFDO1FBQ3RDLFlBQVksRUFBRSw2QkFBdUM7UUFDckQsZUFBZSxFQUFFLGdDQUEwQztRQUMzRCxZQUFZLEVBQUUsVUFBVTtRQUN4QixZQUFZLEVBQUUsQ0FBRSxFQUFFLENBQUU7UUFDcEIsT0FBTyxFQUFFLE9BQWM7UUFDdkIsYUFBYSxFQUFFLGNBQXdCO0tBQzFDLENBQUMsQ0FBQTtJQUNGLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQzNCLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgYnJvYWRjYXN0VHJhbnNhY3Rpb24sXG4gICAgQnVmZmVyQ1YsXG4gICAgYnVmZmVyQ1YsXG4gICAgY2FsbFJlYWRPbmx5RnVuY3Rpb24sXG4gICAgY3ZUb0pTT04sXG4gICAgY3ZUb1ZhbHVlLFxuICAgIExpc3RDVixcbiAgICBsaXN0Q1YsXG4gICAgU29tZUNWLFxuICAgIFR1cGxlQ1YsXG4gICAgdHVwbGVDVixcbiAgICBUeEJyb2FkY2FzdFJlc3VsdCxcbiAgICB1aW50Q1YsXG4gICAgVUludENWXG59IGZyb20gXCJAc3RhY2tzL3RyYW5zYWN0aW9uc1wiO1xuXG5pbXBvcnQgQk4gZnJvbSBcImJuLmpzXCI7XG5pbXBvcnQge2N2VG9CdWZmZXIsIHJldmVyc2VCdWZmZXJ9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQge0NsYXJpdHlWYWx1ZX0gZnJvbSBcIkBzdGFja3MvdHJhbnNhY3Rpb25zL3NyYy9jbGFyaXR5L2NsYXJpdHlWYWx1ZVwiO1xuXG5jb25zdCB7XG4gICAgQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX05BTUUsXG4gICAgQ0FDSEVfVFhfQ09OVFJBQ1RfTkFNRSxcbiAgICBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfQUREUkVTUyxcbiAgICBORVRXT1JLLFxuICAgIFNFTkRFUl9BRERSRVNTLFxufSA9IHByb2Nlc3MuZW52XG5cblxuLy8gZXhwb3J0IGNvbnN0IHZlcmlmeUJsb2NrSGVhZGVyID0gYXN5bmMgKGJsb2NrSGVhZGVyOiBCdWZmZXIsIHN0eEJsb2NrSGVpZ2h0OiBudW1iZXIpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbi8vICAgICAvLyAodmVyaWZ5LWJsb2NrLWhlYWRlciAoaGVhZGVyYnVmZiAoYnVmZiA4MCkpIChleHBlY3RlZC1ibG9jay1oZWlnaHQgdWludCkpXG4vLyAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbFJlYWRPbmx5RnVuY3Rpb24oe1xuLy8gICAgICAgICBjb250cmFjdE5hbWU6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9OQU1FIGFzIHN0cmluZyxcbi8vICAgICAgICAgY29udHJhY3RBZGRyZXNzOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfQUREUkVTUyBhcyBzdHJpbmcsXG4vLyAgICAgICAgIGZ1bmN0aW9uTmFtZTogJ3ZlcmlmeS1ibG9jay1oZWFkZXInLFxuLy8gICAgICAgICBmdW5jdGlvbkFyZ3M6IFtcbi8vICAgICAgICAgICAgIGJ1ZmZlckNWKGJsb2NrSGVhZGVyKSxcbi8vICAgICAgICAgICAgIHVpbnRDVihzdHhCbG9ja0hlaWdodClcbi8vICAgICAgICAgXSxcbi8vICAgICAgICAgbmV0d29yazogTkVUV09SSyBhcyBhbnksXG4vLyAgICAgICAgIHNlbmRlckFkZHJlc3M6IFNFTkRFUl9BRERSRVNTIGFzIHN0cmluZyxcbi8vICAgICB9KVxuLy8gICAgIHJldHVybiBjdlRvVmFsdWUocmVzdWx0KVxuLy8gfVxuXG4vLyBleHBvcnQgY29uc3QgdmVyaWZ5UHJvb2YgPSBhc3luYyAoXG4vLyAgICAgc3R4QmxvY2tIZWlnaHQ6IG51bWJlcixcbi8vICAgICBibG9ja0hlYWRlcjogQnVmZmVyLFxuLy8gICAgIHR4OiBCdWZmZXIsXG4vLyAgICAgdHhJbmRleDogbnVtYmVyLFxuLy8gICAgIHByb29mOiBCdWZmZXJbXVxuLy8gKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4vLyAgICAgY29uc29sZS5hc3NlcnQoYmxvY2tIZWFkZXIubGVuZ3RoID09PSA4MCwgXCJoZWFkZXIgbGVuZ3RoIGluY29ycmVjdFwiKVxuLy8gICAgIGNvbnNvbGUuYXNzZXJ0KHR4Lmxlbmd0aCA8PSAxMDI0LCBcInR4IHRvbyBsb25nXCIpXG4vL1xuLy8gICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxSZWFkT25seUZ1bmN0aW9uKHtcbi8vICAgICAgICAgY29udHJhY3ROYW1lOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfTkFNRSBhcyBzdHJpbmcsXG4vLyAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX0FERFJFU1MgYXMgc3RyaW5nLFxuLy8gICAgICAgICBmdW5jdGlvbk5hbWU6ICd3YXMtdHgtbWluZWQtY29tcGFjdCcsXG4vLyAgICAgICAgIGZ1bmN0aW9uQXJnczogW1xuLy8gICAgICAgICAgICAgdHVwbGVDVih7XG4vLyAgICAgICAgICAgICAgICAgaGVhZGVyOiBidWZmZXJDVihibG9ja0hlYWRlciksXG4vLyAgICAgICAgICAgICAgICAgaGVpZ2h0OiB1aW50Q1Yoc3R4QmxvY2tIZWlnaHQpLFxuLy8gICAgICAgICAgICAgfSksXG4vLyAgICAgICAgICAgICBidWZmZXJDVih0eCksXG4vLyAgICAgICAgICAgICB0dXBsZUNWKHtcbi8vICAgICAgICAgICAgICAgICBcInR4LWluZGV4XCI6IHVpbnRDVih0eEluZGV4KSxcbi8vICAgICAgICAgICAgICAgICBoYXNoZXM6IGxpc3RDVjxCdWZmZXJDVj4ocHJvb2YubWFwKGhhc2ggPT4gYnVmZmVyQ1YocmV2ZXJzZUJ1ZmZlcihoYXNoKSkpKSxcbi8vICAgICAgICAgICAgICAgICBcInRyZWUtZGVwdGhcIjogdWludENWKHByb29mLmxlbmd0aClcbi8vICAgICAgICAgICAgIH0pXG4vLyAgICAgICAgIF0sXG4vLyAgICAgICAgIG5ldHdvcms6IE5FVFdPUksgYXMgYW55LFxuLy8gICAgICAgICBzZW5kZXJBZGRyZXNzOiBTRU5ERVJfQUREUkVTUyBhcyBzdHJpbmcsXG4vLyAgICAgfSlcbi8vICAgICByZXR1cm4gY3ZUb1ZhbHVlKHJlc3VsdCkudmFsdWVcbi8vIH1cbi8vXG4vLyBleHBvcnQgY29uc3QgZ2V0QmxvY2tIZWFkZXJIYXNoID0gYXN5bmMgKHN0eEJsb2NrSGVpZ2h0OiBudW1iZXIpOiBQcm9taXNlPEJ1ZmZlcj4gPT4ge1xuLy8gICAgIC8vIChnZXQtYmMtaC1oYXNoIChiaCB1aW50KSlcbi8vICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsUmVhZE9ubHlGdW5jdGlvbih7XG4vLyAgICAgICAgIGNvbnRyYWN0TmFtZTogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX05BTUUgYXMgc3RyaW5nLFxuLy8gICAgICAgICBjb250cmFjdEFkZHJlc3M6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTIGFzIHN0cmluZyxcbi8vICAgICAgICAgZnVuY3Rpb25OYW1lOiAnZ2V0LWJjLWgtaGFzaCcsXG4vLyAgICAgICAgIGZ1bmN0aW9uQXJnczogW3VpbnRDVihzdHhCbG9ja0hlaWdodCldLFxuLy8gICAgICAgICBuZXR3b3JrOiBORVRXT1JLIGFzIGFueSxcbi8vICAgICAgICAgc2VuZGVyQWRkcmVzczogU0VOREVSX0FERFJFU1MgYXMgc3RyaW5nLFxuLy8gICAgIH0pIGFzIFNvbWVDVjxCdWZmZXJDVj5cbi8vICAgICByZXR1cm4gY3ZUb0J1ZmZlcihyZXN1bHQudmFsdWUpXG4vLyB9XG4vL1xuLy8gY29uc3QgbnVtYmVyVG9CdWZmZXJDViA9ICh2YWx1ZTogQk4gfCBudW1iZXIgfCBzdHJpbmcsIHNpemU6IG51bWJlciA9IDgpOiBCdWZmZXJDViA9PiBidWZmZXJDVihyZXZlcnNlQnVmZmVyKEJ1ZmZlci5mcm9tKFxuLy8gICAgIG5ldyBCTih2YWx1ZSkudG9TdHJpbmcoMTYsIHNpemUgKiAyKSxcbi8vICAgICAnaGV4J1xuLy8gKSkpXG4vL1xuLy8gaW50ZXJmYWNlIFR4T3V0cHV0IHtcbi8vICAgICB2YWx1ZTogQk4sXG4vLyAgICAgc2NyaXB0UHViS2V5OiBCdWZmZXJcbi8vIH1cbi8vXG4vLyBjb25zdCB0eE91dHB1dFRvVHVwbGVDViA9ICh7dmFsdWUsIHNjcmlwdFB1YktleX06IFR4T3V0cHV0KTogVHVwbGVDViA9PiB0dXBsZUNWKHtcbi8vICAgICB2YWx1ZTogbnVtYmVyVG9CdWZmZXJDVih2YWx1ZSksXG4vLyAgICAgc2NyaXB0UHViS2V5OiBidWZmZXJDVihzY3JpcHRQdWJLZXkpXG4vLyB9KVxuLy9cbi8vIGV4cG9ydCBjb25zdCBjb25jYXRPdXQgPSBhc3luYyAodHhPdXRwdXQ6IFR4T3V0cHV0KTogUHJvbWlzZTxCdWZmZXI+ID0+IHtcbi8vICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsUmVhZE9ubHlGdW5jdGlvbih7XG4vLyAgICAgICAgIGNvbnRyYWN0TmFtZTogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX05BTUUgYXMgc3RyaW5nLFxuLy8gICAgICAgICBjb250cmFjdEFkZHJlc3M6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTIGFzIHN0cmluZyxcbi8vICAgICAgICAgZnVuY3Rpb25OYW1lOiAnY29uY2F0LW91dCcsXG4vLyAgICAgICAgIGZ1bmN0aW9uQXJnczogW1xuLy8gICAgICAgICAgICAgdHhPdXRwdXRUb1R1cGxlQ1YodHhPdXRwdXQpLFxuLy8gICAgICAgICAgICAgYnVmZmVyQ1YoQnVmZmVyLmFsbG9jKDApKVxuLy8gICAgICAgICBdLFxuLy8gICAgICAgICBuZXR3b3JrOiBORVRXT1JLIGFzIGFueSxcbi8vICAgICAgICAgc2VuZGVyQWRkcmVzczogU0VOREVSX0FERFJFU1MgYXMgc3RyaW5nLFxuLy8gICAgIH0pXG4vLyAgICAgcmV0dXJuIGN2VG9CdWZmZXIocmVzdWx0IGFzIEJ1ZmZlckNWKVxuLy8gfVxuLy9cbi8vIGV4cG9ydCBjb25zdCBjb25jYXRPdXRzID0gYXN5bmMgKG91dHB1dHM6IFR4T3V0cHV0W10pOiBQcm9taXNlPEJ1ZmZlcj4gPT4ge1xuLy8gICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxSZWFkT25seUZ1bmN0aW9uKHtcbi8vICAgICAgICAgY29udHJhY3ROYW1lOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfTkFNRSBhcyBzdHJpbmcsXG4vLyAgICAgICAgIGNvbnRyYWN0QWRkcmVzczogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX0FERFJFU1MgYXMgc3RyaW5nLFxuLy8gICAgICAgICBmdW5jdGlvbk5hbWU6ICdjb25jYXQtb3V0cycsXG4vLyAgICAgICAgIGZ1bmN0aW9uQXJnczogW1xuLy8gICAgICAgICAgICAgbGlzdENWPFR1cGxlQ1Y+KG91dHB1dHMubWFwKHR4T3V0cHV0VG9UdXBsZUNWKSksXG4vLyAgICAgICAgIF0sXG4vLyAgICAgICAgIG5ldHdvcms6IE5FVFdPUksgYXMgYW55LFxuLy8gICAgICAgICBzZW5kZXJBZGRyZXNzOiBTRU5ERVJfQUREUkVTUyBhcyBzdHJpbmcsXG4vLyAgICAgfSlcbi8vICAgICByZXR1cm4gY3ZUb0J1ZmZlcihyZXN1bHQgYXMgQnVmZmVyQ1YpXG4vLyB9XG5cbi8vIGludGVyZmFjZSBUeElucHV0IHtcbi8vICAgICB0eGlkOiBCdWZmZXIsXG4vLyAgICAgaW5kZXg6IG51bWJlcixcbi8vICAgICBzY3JpcHRTaWc6IEJ1ZmZlcixcbi8vICAgICBzZXF1ZW5jZTogbnVtYmVyLFxuLy8gfVxuXG4vLyBjb25zdCB0eElucHV0VG9UdXBsZUNWID0gKHt0eGlkLCBpbmRleCwgc2NyaXB0U2lnLCBzZXF1ZW5jZX06IFR4SW5wdXQpID0+IHR1cGxlQ1Yoe1xuLy8gICAgIG91dHBvaW50OiB0dXBsZUNWKHtcbi8vICAgICAgICAgaGFzaDogYnVmZmVyQ1YocmV2ZXJzZUJ1ZmZlcih0eGlkKSksXG4vLyAgICAgICAgIGluZGV4OiBudW1iZXJUb0J1ZmZlckNWKGluZGV4LCA0KVxuLy8gICAgIH0pLFxuLy8gICAgIHNjcmlwdFNpZzogYnVmZmVyQ1Yoc2NyaXB0U2lnKSxcbi8vICAgICBzZXF1ZW5jZTogbnVtYmVyVG9CdWZmZXJDVihzZXF1ZW5jZSwgNClcbi8vIH0pXG4vL1xuLy8gZXhwb3J0IGNvbnN0IGNvbmNhdElucyA9IGFzeW5jICh0eElucHV0czogVHhJbnB1dFtdKTogUHJvbWlzZTxCdWZmZXI+ID0+IHtcbi8vICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsUmVhZE9ubHlGdW5jdGlvbih7XG4vLyAgICAgICAgIGNvbnRyYWN0TmFtZTogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX05BTUUgYXMgc3RyaW5nLFxuLy8gICAgICAgICBjb250cmFjdEFkZHJlc3M6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTIGFzIHN0cmluZyxcbi8vICAgICAgICAgZnVuY3Rpb25OYW1lOiAnY29uY2F0LWluJyxcbi8vICAgICAgICAgZnVuY3Rpb25BcmdzOiBbXG4vLyAgICAgICAgICAgICBsaXN0Q1Y8VHVwbGVDVj4odHhJbnB1dHMubWFwKHR4SW5wdXRUb1R1cGxlQ1YpKVxuLy8gICAgICAgICBdLFxuLy8gICAgICAgICBuZXR3b3JrOiBORVRXT1JLIGFzIGFueSxcbi8vICAgICAgICAgc2VuZGVyQWRkcmVzczogU0VOREVSX0FERFJFU1MgYXMgc3RyaW5nLFxuLy8gICAgIH0pXG4vLyAgICAgcmV0dXJuIGN2VG9CdWZmZXIocmVzdWx0IGFzIEJ1ZmZlckNWKVxuLy8gfVxuLy9cblxuZXhwb3J0IHR5cGUgVHhPdXRwdXRDViA9IHtcbiAgICB2YWx1ZTogVUludENWLFxuICAgIHNjcmlwdFB1YktleTogQnVmZmVyQ1Zcbn1cblxuZXhwb3J0IHR5cGUgVHhJbnB1dE91dHBvaW50ID0ge1xuICAgIGhhc2g6IEJ1ZmZlckNWLFxuICAgIGluZGV4OiBVSW50Q1Zcbn1cblxuZXhwb3J0IHR5cGUgVHhJbnB1dENWID0ge1xuICAgIG91dHBvaW50OiBUdXBsZUNWPFR4SW5wdXRPdXRwb2ludD4sXG4gICAgc2NyaXB0U2lnOiBCdWZmZXJDVixcbiAgICBzZXF1ZW5jZTogVUludENWXG59XG5cbmV4cG9ydCB0eXBlIFR4RGF0YUNWID0ge1xuICAgIHZlcnNpb246IEJ1ZmZlckNWLFxuICAgIGluczogTGlzdENWPFR1cGxlQ1Y8VHhJbnB1dENWPj4sXG4gICAgb3V0czogTGlzdENWPFR1cGxlQ1Y8VHhPdXRwdXRDVj4+XG4gICAgbG9ja3RpbWU6IEJ1ZmZlckNWXG59XG5cbmV4cG9ydCB0eXBlIENvbXBhY3RIZWFkZXJEYXRhQ1YgPSB7XG4gICAgaGVhZGVyOiBCdWZmZXJDVixcbiAgICBoZWlnaHQ6IFVJbnRDVlxufVxuXG5leHBvcnQgdHlwZSBIZWFkZXJEYXRhQ1YgPSB7XG4gICAgdmVyc2lvbjogQnVmZmVyQ1YsXG4gICAgcGFyZW50OiBCdWZmZXJDVixcbiAgICBcIm1lcmtsZS1yb290XCI6IEJ1ZmZlckNWLFxuICAgIHRpbWVzdGFtcDogQnVmZmVyQ1YsXG4gICAgbmJpdHM6IEJ1ZmZlckNWLFxuICAgIG5vbmNlOiBCdWZmZXJDVixcbiAgICBoZWlnaHQ6IFVJbnRDVlxufVxuXG5leHBvcnQgY29uc3QgY29uY2F0VHggPSBhc3luYyAodHg6IFR1cGxlQ1Y8VHhEYXRhQ1Y+KTogUHJvbWlzZTxCdWZmZXI+ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYWxsUmVhZE9ubHlGdW5jdGlvbih7XG4gICAgICAgIGNvbnRyYWN0TmFtZTogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX05BTUUgYXMgc3RyaW5nLFxuICAgICAgICBjb250cmFjdEFkZHJlc3M6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9BRERSRVNTIGFzIHN0cmluZyxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiAnY29uY2F0LXR4JyxcbiAgICAgICAgZnVuY3Rpb25BcmdzOiBbIHR4IF0sXG4gICAgICAgIG5ldHdvcms6IE5FVFdPUksgYXMgYW55LFxuICAgICAgICBzZW5kZXJBZGRyZXNzOiBTRU5ERVJfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgfSlcbiAgICByZXR1cm4gY3ZUb0J1ZmZlcihyZXN1bHQgYXMgQnVmZmVyQ1YpXG59XG5cbmV4cG9ydCBjb25zdCB2ZXJpZnlDb21wYWN0VHggPSBhc3luYyAoXG4gICAgaGVhZGVyOiBUdXBsZUNWLFxuICAgIHR4OiBCdWZmZXJDVixcbiAgICBwcm9vZjogVHVwbGVDVixcbik6IFByb21pc2U8YW55PiA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbFJlYWRPbmx5RnVuY3Rpb24oe1xuICAgICAgICBjb250cmFjdE5hbWU6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9OQU1FIGFzIHN0cmluZyxcbiAgICAgICAgY29udHJhY3RBZGRyZXNzOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgICAgIGZ1bmN0aW9uTmFtZTogJ3dhcy10eC1taW5lZC1jb21wYWN0JyxcbiAgICAgICAgZnVuY3Rpb25BcmdzOiBbaGVhZGVyLCB0eCwgcHJvb2ZdLFxuICAgICAgICBuZXR3b3JrOiBORVRXT1JLIGFzIGFueSxcbiAgICAgICAgc2VuZGVyQWRkcmVzczogU0VOREVSX0FERFJFU1MgYXMgc3RyaW5nLFxuICAgIH0pO1xuICAgIHJldHVybiBjdlRvVmFsdWUocmVzdWx0KVxufVxuXG5leHBvcnQgY29uc3QgdmVyaWZ5VHggPSBhc3luYyAoXG4gICAgaGVhZGVyOiBUdXBsZUNWLFxuICAgIHR4OiBCdWZmZXJDVixcbiAgICBwcm9vZjogVHVwbGVDVlxuKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGF3YWl0IGNhbGxSZWFkT25seUZ1bmN0aW9uKHtcbiAgICAgICAgY29udHJhY3ROYW1lOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfTkFNRSBhcyBzdHJpbmcsXG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogQ0xBUklUWV9CSVRDT0lOX0NPTlRSQUNUX0FERFJFU1MgYXMgc3RyaW5nLFxuICAgICAgICBmdW5jdGlvbk5hbWU6ICd3YXMtdHgtbWluZWQnLFxuICAgICAgICBmdW5jdGlvbkFyZ3M6IFtoZWFkZXIsIHR4LCBwcm9vZl0sXG4gICAgICAgIG5ldHdvcms6IE5FVFdPUksgYXMgYW55LFxuICAgICAgICBzZW5kZXJBZGRyZXNzOiBTRU5ERVJfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uXG59XG5cbmV4cG9ydCBjb25zdCBwYXJzZVR4ID0gYXN5bmMgKHR4OiBCdWZmZXJDVik6IFByb21pc2U8YW55PiA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2FsbFJlYWRPbmx5RnVuY3Rpb24oe1xuICAgICAgICBjb250cmFjdE5hbWU6IENMQVJJVFlfQklUQ09JTl9DT05UUkFDVF9OQU1FIGFzIHN0cmluZyxcbiAgICAgICAgY29udHJhY3RBZGRyZXNzOiBDTEFSSVRZX0JJVENPSU5fQ09OVFJBQ1RfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgICAgIGZ1bmN0aW9uTmFtZTogJ3BhcnNlLXR4JyxcbiAgICAgICAgZnVuY3Rpb25BcmdzOiBbIHR4IF0sXG4gICAgICAgIG5ldHdvcms6IE5FVFdPUksgYXMgYW55LFxuICAgICAgICBzZW5kZXJBZGRyZXNzOiBTRU5ERVJfQUREUkVTUyBhcyBzdHJpbmcsXG4gICAgfSlcbiAgICByZXR1cm4gY3ZUb0pTT04ocmVzdWx0KVxufVxuXG4iXX0=