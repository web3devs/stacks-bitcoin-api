import { parseRawProof } from "./txproof.js";
import 'dotenv/config';
const VERBOSE = 2;
const { RPCURL, APIKEY } = process.env;
const callRpc = async (method, params) => {
    const response = await fetch(RPCURL, {
        method: 'POST',
        body: JSON.stringify({
            "jsonrpc": "2.0",
            "id": Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
            "method": method,
            "params": params
        }),
        headers: {
            'Content-Type': 'application/json',
            'x-api-key': APIKEY
        }
    });
    const responseJson = await response.json();
    if (responseJson.error)
        throw responseJson.error;
    return responseJson.result;
};
export const getRawTransaction = (txid, verbose = false, blockhash) => callRpc('getrawtransaction', [txid, verbose, blockhash]);
export const getBlockHeader = (blockhash, verbose = false) => callRpc('getblockheader', [blockhash, verbose]);
export const getTxOutProof = async (txids, blockhash) => parseRawProof(await callRpc('gettxoutproof', [txids, blockhash]));
export const getBlock = async (blockhash, verbosity = VERBOSE) => callRpc('getblock', [blockhash, verbosity]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQml0Y29pblJwY0NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkJpdGNvaW5ScGNDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3QyxPQUFPLGVBQWUsQ0FBQTtBQUV0QixNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUE7QUFFakIsTUFBTSxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFBO0FBRXBDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQUUsTUFBYSxFQUFnQixFQUFFO0lBQ2xFLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQWdCLEVBQUU7UUFDM0MsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNqQixTQUFTLEVBQUUsS0FBSztZQUNoQixJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBQ3pELFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFFBQVEsRUFBRSxNQUFNO1NBQ25CLENBQUM7UUFDRixPQUFPLEVBQUU7WUFDTCxjQUFjLEVBQUUsa0JBQWtCO1lBQ2xDLFdBQVcsRUFBRSxNQUFnQjtTQUNoQztLQUNKLENBQUMsQ0FBQTtJQUNGLE1BQU0sWUFBWSxHQUFRLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBO0lBQy9DLElBQUksWUFBWSxDQUFDLEtBQUs7UUFBRSxNQUFNLFlBQVksQ0FBQyxLQUFLLENBQUE7SUFDaEQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFBO0FBQzlCLENBQUMsQ0FBQTtBQUVELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBWSxFQUFFLFVBQW1CLEtBQUssRUFBRSxTQUFrQixFQUFFLEVBQUUsQ0FDNUYsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFBO0FBRTVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLFNBQWlCLEVBQUUsVUFBbUIsS0FBSyxFQUFFLEVBQUUsQ0FDMUUsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUE7QUFFbkQsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLEtBQUssRUFBRSxLQUFlLEVBQUUsU0FBaUIsRUFBRSxFQUFFLENBQ3RFLGFBQWEsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBRXJFLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxLQUFLLEVBQUUsU0FBaUIsRUFBRSxZQUFvQixPQUFPLEVBQUUsRUFBRSxDQUM3RSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZVJhd1Byb29mIH0gZnJvbSBcIi4vdHhwcm9vZi5qc1wiO1xuaW1wb3J0ICdkb3RlbnYvY29uZmlnJ1xuXG5jb25zdCBWRVJCT1NFID0gMlxuXG5jb25zdCB7UlBDVVJMLCBBUElLRVl9ID0gcHJvY2Vzcy5lbnZcblxuY29uc3QgY2FsbFJwYyA9IGFzeW5jIChtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBhbnlbXSk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChSUENVUkwgYXMgc3RyaW5nLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBcImpzb25ycGNcIjogXCIyLjBcIixcbiAgICAgICAgICAgIFwiaWRcIjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpLFxuICAgICAgICAgICAgXCJtZXRob2RcIjogbWV0aG9kLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogcGFyYW1zXG4gICAgICAgIH0pLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ3gtYXBpLWtleSc6IEFQSUtFWSBhcyBzdHJpbmdcbiAgICAgICAgfVxuICAgIH0pXG4gICAgY29uc3QgcmVzcG9uc2VKc29uOiBhbnkgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICBpZiAocmVzcG9uc2VKc29uLmVycm9yKSB0aHJvdyByZXNwb25zZUpzb24uZXJyb3JcbiAgICByZXR1cm4gcmVzcG9uc2VKc29uLnJlc3VsdFxufVxuXG5leHBvcnQgY29uc3QgZ2V0UmF3VHJhbnNhY3Rpb24gPSAodHhpZDogc3RyaW5nLCB2ZXJib3NlOiBib29sZWFuID0gZmFsc2UsIGJsb2NraGFzaD86IHN0cmluZykgPT5cbiAgICBjYWxsUnBjKCdnZXRyYXd0cmFuc2FjdGlvbicsIFt0eGlkLCB2ZXJib3NlLCBibG9ja2hhc2hdKVxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tIZWFkZXIgPSAoYmxvY2toYXNoOiBzdHJpbmcsIHZlcmJvc2U6IGJvb2xlYW4gPSBmYWxzZSkgPT5cbiAgICBjYWxsUnBjKCdnZXRibG9ja2hlYWRlcicsIFtibG9ja2hhc2gsIHZlcmJvc2VdKVxuXG5leHBvcnQgY29uc3QgZ2V0VHhPdXRQcm9vZiA9IGFzeW5jICh0eGlkczogU3RyaW5nW10sIGJsb2NraGFzaDogc3RyaW5nKSA9PlxuICAgIHBhcnNlUmF3UHJvb2YoYXdhaXQgY2FsbFJwYygnZ2V0dHhvdXRwcm9vZicsIFt0eGlkcywgYmxvY2toYXNoXSkpXG5cbmV4cG9ydCBjb25zdCBnZXRCbG9jayA9IGFzeW5jIChibG9ja2hhc2g6IFN0cmluZywgdmVyYm9zaXR5OiBudW1iZXIgPSBWRVJCT1NFKSA9PlxuICAgIGNhbGxScGMoJ2dldGJsb2NrJywgW2Jsb2NraGFzaCwgdmVyYm9zaXR5XSkiXX0=