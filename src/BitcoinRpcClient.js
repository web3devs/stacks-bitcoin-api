import 'dotenv/config';
import { hexOrBufferToHex } from "./utils.js";
const { RPCURL, APIKEY } = process.env;
const callRpc = async (method, params) => {
    // TODO Make this work with the bitcoin node in the clarinet integrate environment
    const init = {
        method: 'POST',
        body: JSON.stringify({
            "jsonrpc": "2.0",
            "id": Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
            "method": method,
            "params": params
        }),
        headers: {
            'Content-Type': 'application/json',
            'x-api-key': APIKEY,
        }
    };
    const response = await fetch(RPCURL, init);
    console.assert(response.status !== 401, response.status);
    const responseJson = await response.json();
    console.assert(!responseJson.error, JSON.stringify(responseJson.error));
    return responseJson.result;
};
export const getTransactionDetails = (txid) => callRpc('getrawtransaction', [hexOrBufferToHex(txid), true]);
export const getRawBlockHeader = (blockhash) => callRpc('getblockheader', [hexOrBufferToHex(blockhash), false]);
export const getBlockStats = (blockhash) => callRpc('getblock', [hexOrBufferToHex(blockhash), 1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQml0Y29pblJwY0NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkJpdGNvaW5ScGNDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxlQUFlLENBQUE7QUFFdEIsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sWUFBWSxDQUFBO0FBRTNDLE1BQU0sRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQTtBQUVwQyxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsTUFBYyxFQUFFLE1BQWEsRUFBZ0IsRUFBRTtJQUNsRSxrRkFBa0Y7SUFDbEYsTUFBTSxJQUFJLEdBQUc7UUFDVCxNQUFNLEVBQUUsTUFBTTtRQUNkLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2pCLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDekQsUUFBUSxFQUFFLE1BQU07WUFDaEIsUUFBUSxFQUFFLE1BQU07U0FDbkIsQ0FBQztRQUNGLE9BQU8sRUFBRTtZQUNMLGNBQWMsRUFBRSxrQkFBa0I7WUFDbEMsV0FBVyxFQUFFLE1BQWdCO1NBQ2hDO0tBQ0osQ0FBQztJQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLE1BQWdCLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDcEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDeEQsTUFBTSxZQUFZLEdBQVEsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDL0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUN2RSxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUE7QUFDOUIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxJQUFxQixFQUFFLEVBQUUsQ0FDM0QsT0FBTyxDQUFDLG1CQUFtQixFQUFFLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtBQUVoRSxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFNBQTBCLEVBQUUsRUFBRSxDQUM1RCxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBRW5FLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLFNBQTBCLEVBQUUsRUFBRSxDQUN4RCxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnZG90ZW52L2NvbmZpZydcbmltcG9ydCB7QnVmZmVyfSBmcm9tIFwiYnVmZmVyXCJcbmltcG9ydCB7aGV4T3JCdWZmZXJUb0hleH0gZnJvbSBcIi4vdXRpbHMuanNcIlxuXG5jb25zdCB7UlBDVVJMLCBBUElLRVl9ID0gcHJvY2Vzcy5lbnZcblxuY29uc3QgY2FsbFJwYyA9IGFzeW5jIChtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBhbnlbXSk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgLy8gVE9ETyBNYWtlIHRoaXMgd29yayB3aXRoIHRoZSBiaXRjb2luIG5vZGUgaW4gdGhlIGNsYXJpbmV0IGludGVncmF0ZSBlbnZpcm9ubWVudFxuICAgIGNvbnN0IGluaXQgPSB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBcImpzb25ycGNcIjogXCIyLjBcIixcbiAgICAgICAgICAgIFwiaWRcIjogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpLFxuICAgICAgICAgICAgXCJtZXRob2RcIjogbWV0aG9kLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogcGFyYW1zXG4gICAgICAgIH0pLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ3gtYXBpLWtleSc6IEFQSUtFWSBhcyBzdHJpbmcsXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goUlBDVVJMIGFzIHN0cmluZywgaW5pdClcbiAgICBjb25zb2xlLmFzc2VydChyZXNwb25zZS5zdGF0dXMgIT09IDQwMSwgcmVzcG9uc2Uuc3RhdHVzKVxuICAgIGNvbnN0IHJlc3BvbnNlSnNvbjogYW55ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgY29uc29sZS5hc3NlcnQoIXJlc3BvbnNlSnNvbi5lcnJvciwgSlNPTi5zdHJpbmdpZnkocmVzcG9uc2VKc29uLmVycm9yKSlcbiAgICByZXR1cm4gcmVzcG9uc2VKc29uLnJlc3VsdFxufVxuXG5leHBvcnQgY29uc3QgZ2V0VHJhbnNhY3Rpb25EZXRhaWxzID0gKHR4aWQ6IHN0cmluZyB8IEJ1ZmZlcikgPT5cbiAgICBjYWxsUnBjKCdnZXRyYXd0cmFuc2FjdGlvbicsIFtoZXhPckJ1ZmZlclRvSGV4KHR4aWQpLCB0cnVlXSlcblxuZXhwb3J0IGNvbnN0IGdldFJhd0Jsb2NrSGVhZGVyID0gKGJsb2NraGFzaDogc3RyaW5nIHwgQnVmZmVyKSA9PlxuICAgIGNhbGxScGMoJ2dldGJsb2NraGVhZGVyJywgW2hleE9yQnVmZmVyVG9IZXgoYmxvY2toYXNoKSwgZmFsc2VdKVxuXG5leHBvcnQgY29uc3QgZ2V0QmxvY2tTdGF0cyA9IChibG9ja2hhc2g6IHN0cmluZyB8IEJ1ZmZlcikgPT5cbiAgICBjYWxsUnBjKCdnZXRibG9jaycsIFtoZXhPckJ1ZmZlclRvSGV4KGJsb2NraGFzaCksIDFdKSJdfQ==