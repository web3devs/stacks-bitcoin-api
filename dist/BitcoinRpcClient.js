import 'dotenv/config';
import { hexOrBufferToHex } from './Utils.js';
const { RPCURL, APIKEY } = process.env;
const callRpc = async (method, params) => {
    // TODO Make this work with the bitcoin node in the clarinet integrate environment
    const init = {
        method: 'POST',
        body: JSON.stringify({
            jsonrpc: '2.0',
            id: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
            method: method,
            params: params,
        }),
        headers: {
            'Content-Type': 'application/json',
            'x-api-key': APIKEY,
        },
    };
    const response = await fetch(RPCURL, init);
    console.assert(response.status !== 401, response.status);
    const responseJson = await response.json();
    console.assert(!responseJson.error, JSON.stringify(responseJson.error));
    return responseJson.result;
};
export const getTransactionDetails = (txid) => callRpc('getrawtransaction', [hexOrBufferToHex(txid), true]);
export const getRawBlockHeader = (blockhash) => callRpc('getblockheader', [hexOrBufferToHex(blockhash), false]);
export const getBlockStats = (blockhash) => callRpc('getblock', [hexOrBufferToHex(blockhash), 1]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQml0Y29pblJwY0NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi9CaXRjb2luUnBjQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sZUFBZSxDQUFBO0FBRXRCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUU3QyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUE7QUFFdEMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE1BQWMsRUFBRSxNQUFhLEVBQWdCLEVBQUU7SUFDbEUsa0ZBQWtGO0lBQ2xGLE1BQU0sSUFBSSxHQUFHO1FBQ1QsTUFBTSxFQUFFLE1BQU07UUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNqQixPQUFPLEVBQUUsS0FBSztZQUNkLEVBQUUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFDdkQsTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUUsTUFBTTtTQUNqQixDQUFDO1FBQ0YsT0FBTyxFQUFFO1lBQ0wsY0FBYyxFQUFFLGtCQUFrQjtZQUNsQyxXQUFXLEVBQUUsTUFBZ0I7U0FDaEM7S0FDSixDQUFBO0lBQ0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNwRCxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN4RCxNQUFNLFlBQVksR0FBUSxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUMvQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ3ZFLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQTtBQUM5QixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLElBQXFCLEVBQUUsRUFBRSxDQUMzRCxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBRWhFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsU0FBMEIsRUFBRSxFQUFFLENBQzVELE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUE7QUFFbkUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsU0FBMEIsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2RvdGVudi9jb25maWcnXG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInXG5pbXBvcnQgeyBoZXhPckJ1ZmZlclRvSGV4IH0gZnJvbSAnLi9VdGlscy5qcydcblxuY29uc3QgeyBSUENVUkwsIEFQSUtFWSB9ID0gcHJvY2Vzcy5lbnZcblxuY29uc3QgY2FsbFJwYyA9IGFzeW5jIChtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBhbnlbXSk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgLy8gVE9ETyBNYWtlIHRoaXMgd29yayB3aXRoIHRoZSBiaXRjb2luIG5vZGUgaW4gdGhlIGNsYXJpbmV0IGludGVncmF0ZSBlbnZpcm9ubWVudFxuICAgIGNvbnN0IGluaXQgPSB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgIGlkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiksXG4gICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtczogcGFyYW1zLFxuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICd4LWFwaS1rZXknOiBBUElLRVkgYXMgc3RyaW5nLFxuICAgICAgICB9LFxuICAgIH1cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFJQQ1VSTCBhcyBzdHJpbmcsIGluaXQpXG4gICAgY29uc29sZS5hc3NlcnQocmVzcG9uc2Uuc3RhdHVzICE9PSA0MDEsIHJlc3BvbnNlLnN0YXR1cylcbiAgICBjb25zdCByZXNwb25zZUpzb246IGFueSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIGNvbnNvbGUuYXNzZXJ0KCFyZXNwb25zZUpzb24uZXJyb3IsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlSnNvbi5lcnJvcikpXG4gICAgcmV0dXJuIHJlc3BvbnNlSnNvbi5yZXN1bHRcbn1cblxuZXhwb3J0IGNvbnN0IGdldFRyYW5zYWN0aW9uRGV0YWlscyA9ICh0eGlkOiBzdHJpbmcgfCBCdWZmZXIpID0+XG4gICAgY2FsbFJwYygnZ2V0cmF3dHJhbnNhY3Rpb24nLCBbaGV4T3JCdWZmZXJUb0hleCh0eGlkKSwgdHJ1ZV0pXG5cbmV4cG9ydCBjb25zdCBnZXRSYXdCbG9ja0hlYWRlciA9IChibG9ja2hhc2g6IHN0cmluZyB8IEJ1ZmZlcikgPT5cbiAgICBjYWxsUnBjKCdnZXRibG9ja2hlYWRlcicsIFtoZXhPckJ1ZmZlclRvSGV4KGJsb2NraGFzaCksIGZhbHNlXSlcblxuZXhwb3J0IGNvbnN0IGdldEJsb2NrU3RhdHMgPSAoYmxvY2toYXNoOiBzdHJpbmcgfCBCdWZmZXIpID0+IGNhbGxScGMoJ2dldGJsb2NrJywgW2hleE9yQnVmZmVyVG9IZXgoYmxvY2toYXNoKSwgMV0pXG4iXX0=