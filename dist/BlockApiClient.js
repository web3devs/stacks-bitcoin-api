import { BlocksApi, Configuration } from '@stacks/blockchain-api-client';
import _ from 'lodash';
import { compareToRange, RangeComparison } from './Utils.js';
const { NETWORK } = process.env;
const config = new Configuration({
    basePath: `https://stacks-node-api.${NETWORK}.stacks.co`,
});
const blocksApi = new BlocksApi(config);
async function __getStxBlockHeight(bitcoinBlockHeight) {
    let limit = 30;
    let minOffset, maxOffset, offset = 0;
    // First check recent blocks
    const firstResponse = await blocksApi.getBlockList({ offset, limit });
    const currentBlockHeight = firstResponse.results[0].height;
    let stxBlock = firstResponse.results.find((b) => b.burn_block_height === bitcoinBlockHeight);
    // Next check the furthest possible block
    offset = Math.min(currentBlockHeight, firstResponse.results[0].burn_block_height - bitcoinBlockHeight) - limit;
    minOffset = limit;
    maxOffset = offset + limit;
    while (!stxBlock) {
        const blockListResponse = await blocksApi.getBlockList({
            offset,
            limit,
        });
        const blocks = blockListResponse.results;
        // The block list has the most recent block first, so it has the maximum block height
        const range = {
            min: blocks[blocks.length - 1].burn_block_height,
            max: blocks[0].burn_block_height,
        };
        switch (compareToRange(bitcoinBlockHeight, range)) {
            case RangeComparison.Contained:
                stxBlock = blocks.find((b) => b.burn_block_height === bitcoinBlockHeight);
                return stxBlock?.height;
            case RangeComparison.Above:
                maxOffset = Math.max(offset - limit, minOffset);
                break;
            case RangeComparison.Below:
                minOffset = Math.min(offset + limit, maxOffset);
                break;
        }
        if (offset < 0 || maxOffset < minOffset) {
            return undefined;
        }
        // Binary search to avoid api throttling
        offset = Math.floor((minOffset + maxOffset) / 2);
    }
    if (!stxBlock) {
        throw `Unable to find the stacks block that corresponds to bitcoin block ${bitcoinBlockHeight}`;
    }
    return stxBlock?.height;
}
export const getStxBlockHeight = _.memoize(__getStxBlockHeight);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmxvY2tBcGlDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvQmxvY2tBcGlDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQUN4RSxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUE7QUFDdEIsT0FBTyxFQUFFLGNBQWMsRUFBUyxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFbkUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUE7QUFFL0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxhQUFhLENBQUM7SUFDN0IsUUFBUSxFQUFFLDJCQUEyQixPQUFPLFlBQVk7Q0FDM0QsQ0FBQyxDQUFBO0FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUE7QUFFdkMsS0FBSyxVQUFVLG1CQUFtQixDQUFDLGtCQUEwQjtJQUN6RCxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUE7SUFDZCxJQUFJLFNBQVMsRUFDVCxTQUFTLEVBQ1QsTUFBTSxHQUFHLENBQUMsQ0FBQTtJQUVkLDRCQUE0QjtJQUM1QixNQUFNLGFBQWEsR0FBRyxNQUFNLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUNyRSxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO0lBRTFELElBQUksUUFBUSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEtBQUssa0JBQWtCLENBQUMsQ0FBQTtJQUU1Rix5Q0FBeUM7SUFDekMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLEtBQUssQ0FBQTtJQUM5RyxTQUFTLEdBQUcsS0FBSyxDQUFBO0lBQ2pCLFNBQVMsR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFBO0lBQzFCLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDZCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sU0FBUyxDQUFDLFlBQVksQ0FBQztZQUNuRCxNQUFNO1lBQ04sS0FBSztTQUNSLENBQUMsQ0FBQTtRQUNGLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLE9BQU8sQ0FBQTtRQUV4QyxxRkFBcUY7UUFDckYsTUFBTSxLQUFLLEdBQVU7WUFDakIsR0FBRyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQjtZQUNoRCxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGlCQUFpQjtTQUNuQyxDQUFBO1FBQ0QsUUFBUSxjQUFjLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDL0MsS0FBSyxlQUFlLENBQUMsU0FBUztnQkFDMUIsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsS0FBSyxrQkFBa0IsQ0FBQyxDQUFBO2dCQUN6RSxPQUFPLFFBQVEsRUFBRSxNQUFNLENBQUE7WUFDM0IsS0FBSyxlQUFlLENBQUMsS0FBSztnQkFDdEIsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQTtnQkFDL0MsTUFBSztZQUNULEtBQUssZUFBZSxDQUFDLEtBQUs7Z0JBQ3RCLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUE7Z0JBQy9DLE1BQUs7U0FDWjtRQUNELElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxTQUFTLEdBQUcsU0FBUyxFQUFFO1lBQ3JDLE9BQU8sU0FBUyxDQUFBO1NBQ25CO1FBQ0Qsd0NBQXdDO1FBQ3hDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0tBQ25EO0lBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNYLE1BQU0scUVBQXFFLGtCQUFrQixFQUFFLENBQUE7S0FDbEc7SUFDRCxPQUFPLFFBQVEsRUFBRSxNQUFNLENBQUE7QUFDM0IsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsb2Nrc0FwaSwgQ29uZmlndXJhdGlvbiB9IGZyb20gJ0BzdGFja3MvYmxvY2tjaGFpbi1hcGktY2xpZW50J1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgY29tcGFyZVRvUmFuZ2UsIFJhbmdlLCBSYW5nZUNvbXBhcmlzb24gfSBmcm9tICcuL1V0aWxzLmpzJ1xuXG5jb25zdCB7IE5FVFdPUksgfSA9IHByb2Nlc3MuZW52XG5cbmNvbnN0IGNvbmZpZyA9IG5ldyBDb25maWd1cmF0aW9uKHtcbiAgICBiYXNlUGF0aDogYGh0dHBzOi8vc3RhY2tzLW5vZGUtYXBpLiR7TkVUV09SS30uc3RhY2tzLmNvYCxcbn0pXG5jb25zdCBibG9ja3NBcGkgPSBuZXcgQmxvY2tzQXBpKGNvbmZpZylcblxuYXN5bmMgZnVuY3Rpb24gX19nZXRTdHhCbG9ja0hlaWdodChiaXRjb2luQmxvY2tIZWlnaHQ6IG51bWJlcik6IFByb21pc2U8bnVtYmVyIHwgdW5kZWZpbmVkPiB7XG4gICAgbGV0IGxpbWl0ID0gMzBcbiAgICBsZXQgbWluT2Zmc2V0LFxuICAgICAgICBtYXhPZmZzZXQsXG4gICAgICAgIG9mZnNldCA9IDBcblxuICAgIC8vIEZpcnN0IGNoZWNrIHJlY2VudCBibG9ja3NcbiAgICBjb25zdCBmaXJzdFJlc3BvbnNlID0gYXdhaXQgYmxvY2tzQXBpLmdldEJsb2NrTGlzdCh7IG9mZnNldCwgbGltaXQgfSlcbiAgICBjb25zdCBjdXJyZW50QmxvY2tIZWlnaHQgPSBmaXJzdFJlc3BvbnNlLnJlc3VsdHNbMF0uaGVpZ2h0XG5cbiAgICBsZXQgc3R4QmxvY2sgPSBmaXJzdFJlc3BvbnNlLnJlc3VsdHMuZmluZCgoYikgPT4gYi5idXJuX2Jsb2NrX2hlaWdodCA9PT0gYml0Y29pbkJsb2NrSGVpZ2h0KVxuXG4gICAgLy8gTmV4dCBjaGVjayB0aGUgZnVydGhlc3QgcG9zc2libGUgYmxvY2tcbiAgICBvZmZzZXQgPSBNYXRoLm1pbihjdXJyZW50QmxvY2tIZWlnaHQsIGZpcnN0UmVzcG9uc2UucmVzdWx0c1swXS5idXJuX2Jsb2NrX2hlaWdodCAtIGJpdGNvaW5CbG9ja0hlaWdodCkgLSBsaW1pdFxuICAgIG1pbk9mZnNldCA9IGxpbWl0XG4gICAgbWF4T2Zmc2V0ID0gb2Zmc2V0ICsgbGltaXRcbiAgICB3aGlsZSAoIXN0eEJsb2NrKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrTGlzdFJlc3BvbnNlID0gYXdhaXQgYmxvY2tzQXBpLmdldEJsb2NrTGlzdCh7XG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3QgYmxvY2tzID0gYmxvY2tMaXN0UmVzcG9uc2UucmVzdWx0c1xuXG4gICAgICAgIC8vIFRoZSBibG9jayBsaXN0IGhhcyB0aGUgbW9zdCByZWNlbnQgYmxvY2sgZmlyc3QsIHNvIGl0IGhhcyB0aGUgbWF4aW11bSBibG9jayBoZWlnaHRcbiAgICAgICAgY29uc3QgcmFuZ2U6IFJhbmdlID0ge1xuICAgICAgICAgICAgbWluOiBibG9ja3NbYmxvY2tzLmxlbmd0aCAtIDFdLmJ1cm5fYmxvY2tfaGVpZ2h0LFxuICAgICAgICAgICAgbWF4OiBibG9ja3NbMF0uYnVybl9ibG9ja19oZWlnaHQsXG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChjb21wYXJlVG9SYW5nZShiaXRjb2luQmxvY2tIZWlnaHQsIHJhbmdlKSkge1xuICAgICAgICAgICAgY2FzZSBSYW5nZUNvbXBhcmlzb24uQ29udGFpbmVkOlxuICAgICAgICAgICAgICAgIHN0eEJsb2NrID0gYmxvY2tzLmZpbmQoKGIpID0+IGIuYnVybl9ibG9ja19oZWlnaHQgPT09IGJpdGNvaW5CbG9ja0hlaWdodClcbiAgICAgICAgICAgICAgICByZXR1cm4gc3R4QmxvY2s/LmhlaWdodFxuICAgICAgICAgICAgY2FzZSBSYW5nZUNvbXBhcmlzb24uQWJvdmU6XG4gICAgICAgICAgICAgICAgbWF4T2Zmc2V0ID0gTWF0aC5tYXgob2Zmc2V0IC0gbGltaXQsIG1pbk9mZnNldClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSBSYW5nZUNvbXBhcmlzb24uQmVsb3c6XG4gICAgICAgICAgICAgICAgbWluT2Zmc2V0ID0gTWF0aC5taW4ob2Zmc2V0ICsgbGltaXQsIG1heE9mZnNldClcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPCAwIHx8IG1heE9mZnNldCA8IG1pbk9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIC8vIEJpbmFyeSBzZWFyY2ggdG8gYXZvaWQgYXBpIHRocm90dGxpbmdcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5mbG9vcigobWluT2Zmc2V0ICsgbWF4T2Zmc2V0KSAvIDIpXG4gICAgfVxuICAgIGlmICghc3R4QmxvY2spIHtcbiAgICAgICAgdGhyb3cgYFVuYWJsZSB0byBmaW5kIHRoZSBzdGFja3MgYmxvY2sgdGhhdCBjb3JyZXNwb25kcyB0byBiaXRjb2luIGJsb2NrICR7Yml0Y29pbkJsb2NrSGVpZ2h0fWBcbiAgICB9XG4gICAgcmV0dXJuIHN0eEJsb2NrPy5oZWlnaHRcbn1cblxuZXhwb3J0IGNvbnN0IGdldFN0eEJsb2NrSGVpZ2h0ID0gXy5tZW1vaXplKF9fZ2V0U3R4QmxvY2tIZWlnaHQpXG4iXX0=