import { cvToValue } from '@stacks/transactions';
import { Buffer } from 'buffer';
import BN from 'bn.js';
export var RangeComparison;
(function (RangeComparison) {
    RangeComparison[RangeComparison["Above"] = 1] = "Above";
    RangeComparison[RangeComparison["Below"] = -1] = "Below";
    RangeComparison[RangeComparison["Contained"] = 0] = "Contained";
})(RangeComparison || (RangeComparison = {}));
export const compareToRange = (i, { min, max }) => i < min ? RangeComparison.Below : i > max ? RangeComparison.Above : RangeComparison.Contained;
export const reverseBuffer = (buffer) => {
    for (let i = 0, j = buffer.length - 1; i < j; ++i, --j) {
        ;
        [buffer[i], buffer[j]] = [buffer[j], buffer[i]];
    }
    return buffer;
};
export const cvToBuffer = (cv) => Buffer.from(cvToValue(cv).slice(2), 'hex');
export const numberToBufferLE = (value, size = 8) => reverseBuffer(Buffer.from(new BN(value).toString(16, size * 2), 'hex'));
export const hexOrBufferToHex = (hob) => (typeof hob === 'string' ? hob : hob.toString('hex'));
export const hexOrBufferToBuffer = (hob) => (typeof hob === 'string' ? Buffer.from(hob, 'hex') : hob);
// const toSatoshis = (v: number | string | BigNumber): BN => new BN(new BigNumber(v).shiftedBy(8).toString())
// const toBitcoins = (v: number): string => new BigNumber(v).shiftedBy(-8).toString()
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFZLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQzFELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDL0IsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFBO0FBUXRCLE1BQU0sQ0FBTixJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7SUFDdkIsdURBQVMsQ0FBQTtJQUNULHdEQUFVLENBQUE7SUFDViwrREFBYSxDQUFBO0FBQ2pCLENBQUMsRUFKVyxlQUFlLEtBQWYsZUFBZSxRQUkxQjtBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQVMsRUFBRSxFQUFFLENBQzdELENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUE7QUFFakcsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBYyxFQUFVLEVBQUU7SUFDcEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDcEQsQ0FBQztRQUFBLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ25EO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDakIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsRUFBWSxFQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFFOUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUEyQixFQUFFLE9BQWUsQ0FBQyxFQUFVLEVBQUUsQ0FDdEYsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUUzRSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUMvRyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEdBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7QUFFdEgsOEdBQThHO0FBQzlHLHNGQUFzRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlckNWLCBjdlRvVmFsdWUgfSBmcm9tICdAc3RhY2tzL3RyYW5zYWN0aW9ucydcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcidcbmltcG9ydCBCTiBmcm9tICdibi5qcydcbi8vIGltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJ1xuXG5leHBvcnQgdHlwZSBSYW5nZSA9IHtcbiAgICBtaW46IG51bWJlclxuICAgIG1heDogbnVtYmVyXG59XG5cbmV4cG9ydCBlbnVtIFJhbmdlQ29tcGFyaXNvbiB7XG4gICAgQWJvdmUgPSAxLFxuICAgIEJlbG93ID0gLTEsXG4gICAgQ29udGFpbmVkID0gMCxcbn1cblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVUb1JhbmdlID0gKGk6IG51bWJlciwgeyBtaW4sIG1heCB9OiBSYW5nZSkgPT5cbiAgICBpIDwgbWluID8gUmFuZ2VDb21wYXJpc29uLkJlbG93IDogaSA+IG1heCA/IFJhbmdlQ29tcGFyaXNvbi5BYm92ZSA6IFJhbmdlQ29tcGFyaXNvbi5Db250YWluZWRcblxuZXhwb3J0IGNvbnN0IHJldmVyc2VCdWZmZXIgPSAoYnVmZmVyOiBCdWZmZXIpOiBCdWZmZXIgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwLCBqID0gYnVmZmVyLmxlbmd0aCAtIDE7IGkgPCBqOyArK2ksIC0taikge1xuICAgICAgICA7W2J1ZmZlcltpXSwgYnVmZmVyW2pdXSA9IFtidWZmZXJbal0sIGJ1ZmZlcltpXV1cbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlclxufVxuXG5leHBvcnQgY29uc3QgY3ZUb0J1ZmZlciA9IChjdjogQnVmZmVyQ1YpOiBCdWZmZXIgPT4gQnVmZmVyLmZyb20oY3ZUb1ZhbHVlKGN2KS5zbGljZSgyKSwgJ2hleCcpXG5cbmV4cG9ydCBjb25zdCBudW1iZXJUb0J1ZmZlckxFID0gKHZhbHVlOiBCTiB8IG51bWJlciB8IHN0cmluZywgc2l6ZTogbnVtYmVyID0gOCk6IEJ1ZmZlciA9PlxuICAgIHJldmVyc2VCdWZmZXIoQnVmZmVyLmZyb20obmV3IEJOKHZhbHVlKS50b1N0cmluZygxNiwgc2l6ZSAqIDIpLCAnaGV4JykpXG5cbmV4cG9ydCBjb25zdCBoZXhPckJ1ZmZlclRvSGV4ID0gKGhvYjogc3RyaW5nIHwgQnVmZmVyKSA9PiAodHlwZW9mIGhvYiA9PT0gJ3N0cmluZycgPyBob2IgOiBob2IudG9TdHJpbmcoJ2hleCcpKVxuZXhwb3J0IGNvbnN0IGhleE9yQnVmZmVyVG9CdWZmZXIgPSAoaG9iOiBzdHJpbmcgfCBCdWZmZXIpID0+ICh0eXBlb2YgaG9iID09PSAnc3RyaW5nJyA/IEJ1ZmZlci5mcm9tKGhvYiwgJ2hleCcpIDogaG9iKVxuXG4vLyBjb25zdCB0b1NhdG9zaGlzID0gKHY6IG51bWJlciB8IHN0cmluZyB8IEJpZ051bWJlcik6IEJOID0+IG5ldyBCTihuZXcgQmlnTnVtYmVyKHYpLnNoaWZ0ZWRCeSg4KS50b1N0cmluZygpKVxuLy8gY29uc3QgdG9CaXRjb2lucyA9ICh2OiBudW1iZXIpOiBzdHJpbmcgPT4gbmV3IEJpZ051bWJlcih2KS5zaGlmdGVkQnkoLTgpLnRvU3RyaW5nKClcbiJdfQ==