import { cvToValue } from "@stacks/transactions";
import { Buffer } from "buffer";
import BN from "bn.js";
import BigNumber from "bignumber.js";
export const hexOrBufferToHex = (hob) => typeof hob === 'string' ? hob : hob.toString('hex');
export const hexOrBufferToBuffer = (hob) => typeof hob === 'string' ? Buffer.from(hob, 'hex') : hob;
export var RangeComparison;
(function (RangeComparison) {
    RangeComparison[RangeComparison["Above"] = 1] = "Above";
    RangeComparison[RangeComparison["Below"] = -1] = "Below";
    RangeComparison[RangeComparison["Contained"] = 0] = "Contained";
})(RangeComparison || (RangeComparison = {}));
export const compareToRange = (i, { min, max }) => i < min ? RangeComparison.Below : i > max ? RangeComparison.Above : RangeComparison.Contained;
export const reverseBuffer = (buffer) => {
    for (let i = 0, j = buffer.length - 1; i < j; ++i, --j) {
        [buffer[i], buffer[j]] = [buffer[j], buffer[i]];
    }
    return buffer;
};
export const cvToBuffer = (cv) => Buffer.from(cvToValue(cv).slice(2), 'hex');
export const numberToBuffer = (value, size = 8) => reverseBuffer(Buffer.from(new BN(value).toString(16, size * 2), 'hex'));
const toSatoshis = (v) => new BN(new BigNumber(v).shiftedBy(8).toString());
const toBitcoins = (v) => new BigNumber(v).shiftedBy(-8).toString();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFXLFNBQVMsRUFBQyxNQUFNLHNCQUFzQixDQUFBO0FBQ3hELE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxRQUFRLENBQUE7QUFDN0IsT0FBTyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3ZCLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQW9CLEVBQUUsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzdHLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsR0FBb0IsRUFBRSxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFBO0FBT3BILE1BQU0sQ0FBTixJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7SUFDdkIsdURBQVMsQ0FBQTtJQUNULHdEQUFVLENBQUE7SUFDViwrREFBYSxDQUFBO0FBQ2pCLENBQUMsRUFKVyxlQUFlLEtBQWYsZUFBZSxRQUkxQjtBQUVELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUFDLENBQVMsRUFBRSxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQVEsRUFBRSxFQUFFLENBQzNELENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUE7QUFFakcsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBYyxFQUFVLEVBQUU7SUFDcEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDcEQsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDbEQ7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNqQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFZLEVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUc5RixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUEyQixFQUFFLE9BQWUsQ0FBQyxFQUFVLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDOUcsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ3BDLEtBQUssQ0FDUixDQUFDLENBQUE7QUFDRixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQThCLEVBQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO0FBQzNHLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBUyxFQUFVLEVBQUUsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QnVmZmVyQ1YsIGN2VG9WYWx1ZX0gZnJvbSBcIkBzdGFja3MvdHJhbnNhY3Rpb25zXCJcbmltcG9ydCB7QnVmZmVyfSBmcm9tIFwiYnVmZmVyXCJcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIjtcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSBcImJpZ251bWJlci5qc1wiO1xuXG5leHBvcnQgY29uc3QgaGV4T3JCdWZmZXJUb0hleCA9IChob2I6IHN0cmluZyB8IEJ1ZmZlcikgPT4gdHlwZW9mIGhvYiA9PT0gJ3N0cmluZycgPyBob2IgOiBob2IudG9TdHJpbmcoJ2hleCcpXG5leHBvcnQgY29uc3QgaGV4T3JCdWZmZXJUb0J1ZmZlciA9IChob2I6IHN0cmluZyB8IEJ1ZmZlcikgPT4gdHlwZW9mIGhvYiA9PT0gJ3N0cmluZycgPyBCdWZmZXIuZnJvbShob2IsICdoZXgnKSA6IGhvYlxuXG5leHBvcnQgdHlwZSBSYW5nZSA9IHtcbiAgICBtaW46IG51bWJlcixcbiAgICBtYXg6IG51bWJlclxufVxuXG5leHBvcnQgZW51bSBSYW5nZUNvbXBhcmlzb24ge1xuICAgIEFib3ZlID0gMSxcbiAgICBCZWxvdyA9IC0xLFxuICAgIENvbnRhaW5lZCA9IDAsXG59XG5cbmV4cG9ydCBjb25zdCBjb21wYXJlVG9SYW5nZSA9IChpOiBudW1iZXIsIHttaW4sIG1heH06IFJhbmdlKSA9PlxuICAgIGkgPCBtaW4gPyBSYW5nZUNvbXBhcmlzb24uQmVsb3cgOiBpID4gbWF4ID8gUmFuZ2VDb21wYXJpc29uLkFib3ZlIDogUmFuZ2VDb21wYXJpc29uLkNvbnRhaW5lZFxuXG5leHBvcnQgY29uc3QgcmV2ZXJzZUJ1ZmZlciA9IChidWZmZXI6IEJ1ZmZlcik6IEJ1ZmZlciA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBidWZmZXIubGVuZ3RoIC0gMTsgaSA8IGo7ICsraSwgLS1qKSB7XG4gICAgICAgIFtidWZmZXJbaV0sIGJ1ZmZlcltqXV0gPSBbYnVmZmVyW2pdLCBidWZmZXJbaV1dXG4gICAgfVxuICAgIHJldHVybiBidWZmZXJcbn1cblxuZXhwb3J0IGNvbnN0IGN2VG9CdWZmZXIgPSAoY3Y6IEJ1ZmZlckNWKTogQnVmZmVyID0+IEJ1ZmZlci5mcm9tKGN2VG9WYWx1ZShjdikuc2xpY2UoMiksICdoZXgnKVxuXG5cbmV4cG9ydCBjb25zdCBudW1iZXJUb0J1ZmZlciA9ICh2YWx1ZTogQk4gfCBudW1iZXIgfCBzdHJpbmcsIHNpemU6IG51bWJlciA9IDgpOiBCdWZmZXIgPT4gcmV2ZXJzZUJ1ZmZlcihCdWZmZXIuZnJvbShcbiAgICBuZXcgQk4odmFsdWUpLnRvU3RyaW5nKDE2LCBzaXplICogMiksXG4gICAgJ2hleCdcbikpXG5jb25zdCB0b1NhdG9zaGlzID0gKHY6IG51bWJlciB8IHN0cmluZyB8IEJpZ051bWJlcik6IEJOID0+IG5ldyBCTihuZXcgQmlnTnVtYmVyKHYpLnNoaWZ0ZWRCeSg4KS50b1N0cmluZygpKVxuY29uc3QgdG9CaXRjb2lucyA9ICh2OiBudW1iZXIpOiBzdHJpbmcgPT4gbmV3IEJpZ051bWJlcih2KS5zaGlmdGVkQnkoLTgpLnRvU3RyaW5nKClcbiJdfQ==